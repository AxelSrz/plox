#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require_relative 'lexer'  # Se agrega el lexer al programa de racc.
  require 'yaml'
  require "awesome_print"
  $line_number = 0          # Se inicializa la variable que guarda el numero de linea en la cual se encuentra el error.
  $speciesBook = Hash.new{}
  $actualSpecies
  $actualModifier
  $isVariable
  $actualType
  $actualMethod
  $actualScope
  $operatorStack = Array.new
  $operandStack = Array.new
  $quadrupleVector = Array.new
  first = ["goto", nil, nil, nil]
  $quadrupleVector.push(first)
  $constantBook = Hash.new
  $constantCounterBook = Hash.new
  $theMagicNumber = 10000
  $magicReference = {
    "global" => {
      "number" => 0,
      "decimal" => 1,
      "string" => 2,
      "char" => 3,
      "logic" => 4
    },
    "local" => {
      "number" => 5,
      "decimal" => 6,
      "string" => 7,
      "char" => 8,
      "logic" => 9
    },
    "temporal" => {
      "number" => 10,
      "decimal" => 11,
      "string" => 12,
      "char" => 13,
      "logic" => 14
    },
    "constant" => {
      "number" => 15,
      "decimal" => 16,
      "string" => 17,
      "char" => 18,
      "logic" => 19
    }
  }
  $magicCounter = {
    "global" => {
      "number" => 0,
      "decimal" => 0,
      "string" => 0,
      "char" => 0,
      "logic" => 0
    },
    "local" => {
      "number" => 0,
      "decimal" => 0,
      "string" => 0,
      "char" => 0,
      "logic" => 0
    },
    "temporal" => {
      "number" => 0,
      "decimal" => 0,
      "string" => 0,
      "char" => 0,
      "logic" => 0
    },
    "constant" => {
      "number" => 0,
      "decimal" => 0,
      "string" => 0,
      "char" => 0,
      "logic" => 0
    }
  }
  $semanticCube = {
    "logic" => {
      "logic" => {
        "!=" => "logic",
        "||=" => "logic",
        "&&=" => "logic",
        "==" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "logic"
      },
      "char" => {
      },
      "number" => {
      },
      "decimal" => {
      },
      "string" => {
      },
      "hear" => {
        "!=" => "logic",
        "||=" => "logic",
        "&&=" => "logic",
        "==" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "logic"
      }
    },
    "char" => {
      "logic" => {
      },
      "char" => {
        "!=" => "logic",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "char",
        "<" => "logic",
        ">" => "logic"
      },
      "number" => {
      },
      "decimal" => {
      },
      "string" => {
      },
      "hear" => {
        "!=" => "logic",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "char",
        "<" => "logic",
        ">" => "logic"
      }
    },
    "number" => {
      "logic" => {
      },
      "char" => {
      },
      "number" => {
        "!=" => "logic",
        "+=" => "number",
        "-=" => "number",
        "*=" => "number",
        "/=" => "number",
        "%=" => "number",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "number",
        "*" => "number",
        "/" => "number",
        "+" => "number",
        "-" => "number",
        "=" => "number",
        "<" => "logic",
        ">" => "logic"
      },
      "decimal" => {
        "!=" => "logic",
        "+=" => "number",
        "-=" => "number",
        "*=" => "number",
        "/=" => "number",
        "%=" => "number",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "number",
        "*" => "number",
        "/" => "number",
        "+" => "number",
        "-" => "number",
        "=" => "number",
        "<" => "logic",
        ">" => "logic"
      },
      "string" => {
      },
      "hear" => {
        "!=" => "logic",
        "+=" => "number",
        "-=" => "number",
        "*=" => "number",
        "/=" => "number",
        "%=" => "number",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "number",
        "*" => "number",
        "/" => "number",
        "+" => "number",
        "-" => "number",
        "=" => "number",
        "<" => "logic",
        ">" => "logic"
      }
    },
    "decimal" => {
      "logic" => {
      },
      "char" => {
      },
      "number" => {
        "!=" => "logic",
        "+=" => "number",
        "-=" => "number",
        "*=" => "number",
        "/=" => "number",
        "%=" => "number",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "number",
        "*" => "number",
        "/" => "number",
        "+" => "number",
        "-" => "number",
        "=" => "number",
        "<" => "logic",
        ">" => "logic"
      },
      "decimal" => {
        "!=" => "logic",
        "+=" => "decimal",
        "-=" => "decimal",
        "*=" => "decimal",
        "/=" => "decimal",
        "%=" => "decimal",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "decimal",
        "*" => "decimal",
        "/" => "decimal",
        "+" => "decimal",
        "-" => "decimal",
        "=" => "decimal",
        "<" => "logic",
        ">" => "logic"
      },
      "string" => {
      },
      "hear" => {
        "!=" => "logic",
        "+=" => "decimal",
        "-=" => "decimal",
        "*=" => "decimal",
        "/=" => "decimal",
        "%=" => "decimal",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "decimal",
        "*" => "decimal",
        "/" => "decimal",
        "+" => "decimal",
        "-" => "decimal",
        "=" => "decimal",
        "<" => "logic",
        ">" => "logic"
      }
    },
    "string" => {
      "logic" => {
      },
      "char" => {
      },
      "number" => {
      },
      "decimal" => {
      },
      "string" => {
        "!=" => "logic",
        "==" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "string",
      },
      "hear" => {
        "!=" => "logic",
        "==" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "string",
      }
    }
  }
  $falseLocation = $magicReference["constant"]["logic"] * $theMagicNumber
  $trueLocation = $falseLocation + 1
  $jumpStack = Array.new
  $actualIdSpecies = nil
  $actualFunkType
  $funkGlobalContext
  $actualId
  $argumentCount = 0
  $argumentCountStack = []
  $funkSpecies
  $speciesStack = Array.new
  $idStack = Array.new
  $actualVarId
  $arrayIndexStack = Array.new

  $constantBook[false] = $magicReference["constant"]["logic"] * $theMagicNumber
  $constantBook[true] = $constantBook[false] + 1

class ObjectivePlox < Racc::Parser

module_eval(<<'...end objective_plox_bison.y/module_eval...', 'objective_plox_bison.y', 613)

  # Se importa esta funcion perteneciente a la gema de racc. Se realiza una modificacion
  # Funcion que lee un archivo como entrada.
  def parse(input)
    scan_file(input)
  end

  # para poder desplegar la linea en la que se encuentra el error.
  def on_error(t, val, vstack)
    raise ParseError, sprintf("\nParsing error on value %s (%s) found on line: %i", val[0].inspect, token_to_str(t) || '?', $line_number)
  end

  def newSpecies(species)
    if $speciesBook[species] == nil
      $speciesBook[species] = Hash.new
      $speciesBook[species]["methods"] = Hash.new
      $speciesBook[species]["variables"] = Hash.new
      $speciesBook[species]["size"] = { "number" => 0, "decimal" => 0, "string" => 0, "char" => 0, "logic" => 0 }
      $actualSpecies = species
      $actualMethod = "species"
      resetCounters("global")
    else
      abort("Semantic error: species '#{species}' is already defined. Error on line: #{$line_number}")
    end
  end

  def heirSpecies(father)
    if $speciesBook[father] != nil
      $speciesBook[$actualSpecies]["father"] = $speciesBook[father]
      $magicCounter["global"] = $speciesBook[father]["size"].clone
    else
      abort("Semantic error: '#{father}' father of species '#{$actualSpecies}' is not defined. Error on line: #{$line_number}")
    end
  end

  def newVariable(id)
    if $actualMethod == "species"
      unless idDeclaredInSpeciesRecursively($speciesBook[$actualSpecies], id, "variables")
        abort("Semantic error: species '#{$actualType}' is not defined. Error on line: #{$line_number}") unless isValidType($actualType)
        abort("Semantic error: you cannot have recursive species definitions. Error on line: #{$line_number}") if $actualType == $actualSpecies
        $speciesBook[$actualSpecies]["variables"][id] = Hash.new
        $speciesBook[$actualSpecies]["variables"][id]["type"] = $actualType
        $speciesBook[$actualSpecies]["variables"][id]["scope"] = $actualModifier
        $speciesBook[$actualSpecies]["variables"][id]["modifiable"] = $isVariable
        if $actualType == "number" || $actualType == "decimal" || $actualType == "string" || $actualType == "char" || $actualType == "logic"
          $speciesBook[$actualSpecies]["variables"][id]["location"] = locationGenerator(1, "global", $actualType)
          $speciesBook[$actualSpecies]["size"][$actualType] += 1
        else
          createAtributtesRecursively(id, $speciesBook[$actualType])
        end
      else
        abort("Semantic error: variable '#{id}' is already defined. Error on line: #{$line_number}")
      end
    else
      if $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] == nil
        abort("Semantic error: species '#{$actualType}' is not defined. Error on line: #{$line_number}") unless isValidType($actualType)
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] = Hash.new
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["type"] = $actualType
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["modifiable"] = $isVariable
        if $actualType == "number" || $actualType == "decimal" || $actualType == "string" || $actualType == "char" || $actualType == "logic"
          $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["location"] = locationGenerator(1, "local", $actualType)
          $speciesBook[$actualSpecies]["methods"][$actualMethod]["size"][$actualType] += 1
        end
      else
        abort("Semantic error: variable '#{id}' is already defined in method '#{$actualMethod}'. Error on line: #{$line_number}")
      end
    end
    $actualVarId = id
  end

  def newArray()
    if $actualMethod == "species"
      if $actualType == "number" || $actualType == "decimal" || $actualType == "string" || $actualType == "char" || $actualType == "logic"
        $speciesBook[$actualSpecies]["variables"][$actualVarId]["dimensions"] = Array.new
      else
        abort("Semantic error: ObjectivePlox currently doesnt support arrays of objects. Error on line: #{$line_number}")
      end
    else
      if $actualType == "number" || $actualType == "decimal" || $actualType == "string" || $actualType == "char" || $actualType == "logic"
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][$actualVarId]["dimensions"] = Array.new
      else
        abort("Semantic error: ObjectivePlox currently doesnt support arrays of objects. Error on line: #{$line_number}")
      end
    end
  end

  def newDimension(infLi, supLi)
    dimension = Hash.new
    dimension["sl"] = supLi[1]
    dimension["il"] = infLi[1]
    dimension["r"] = supLi[1] - infLi[1] + 1
    if $actualMethod == "species"
      dimension["r"] *= $speciesBook[$actualSpecies]["variables"][$actualVarId]["dimensions"].last["r"] if $speciesBook[$actualSpecies]["variables"][$actualVarId]["dimensions"].last != nil
      $speciesBook[$actualSpecies]["variables"][$actualVarId]["dimensions"].push(dimension)
    else
      dimension["r"] *= $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][$actualVarId]["dimensions"].last["r"] if $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][$actualVarId]["dimensions"].last != nil
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][$actualVarId]["dimensions"].push(dimension)
    end
  end

  def defineArray()
    suma = 0
    if $actualMethod == "species"
      r = $speciesBook[$actualSpecies]["variables"][$actualVarId]["dimensions"].last["r"]
      $speciesBook[$actualSpecies]["variables"][$actualVarId]["totalsize"] = r
      locationGenerator(r-1, "global", $actualType)
      $speciesBook[$actualSpecies]["variables"][$actualVarId]["dimensions"].each_with_index do |h, i|
        m = r / (h["sl"] - h["il"] + 1)
        r = m
        suma += (h["il"] * m)
        if i == $speciesBook[$actualSpecies]["variables"][$actualVarId]["dimensions"].count - 1
          $speciesBook[$actualSpecies]["variables"][$actualVarId]["dimensions"][i]["k"] = - suma
        else
          $speciesBook[$actualSpecies]["variables"][$actualVarId]["dimensions"][i]["m"] = m
        end
      end
    else
      r = $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][$actualVarId]["dimensions"].last["r"]
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][$actualVarId]["totalsize"] = r
      locationGenerator(r-1, "local", $actualType)
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][$actualVarId]["dimensions"].each_with_index do |h, i|
        m = r / (h["sl"] - h["il"] + 1)
        r = m
        suma += (h["il"] * m)
        if i == $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][$actualVarId]["dimensions"].count - 1
          $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][$actualVarId]["dimensions"][i]["k"] = - suma
        else
          $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][$actualVarId]["dimensions"][i]["m"] = m
        end
      end
    end
  end

  def idDeclaredInSpeciesRecursively(species, id, type)
    if species[type][id] != nil # regresa si la variable ya existe
      return true
    elsif species["father"] == nil  # si la clase no tiene padre
      return false
    else
      return idDeclaredInSpeciesRecursively(species["father"], id, type) # checa para su padre
    end
  end

  def isValidType(type)
    if type == "number" || type == "decimal" || type == "char" || type == "string" || type == "logic"
      return true
    else
      return $speciesBook[type] != nil # que no sea un hash vacio (valor por default)
    end
  end

  def newMethod(id)
    unless $speciesBook[$actualSpecies]["methods"][id] != nil
      unless isValidType($actualType) || $actualType == "oblivion"
        abort("Semantic error: species '#{$actualType}' is not defined. Error on line: #{$line_number}")
      end
      $speciesBook[$actualSpecies]["methods"][id] = Hash.new
      $speciesBook[$actualSpecies]["methods"][id]["type"] = $actualType
      $speciesBook[$actualSpecies]["methods"][id]["scope"] = $actualModifier
      $speciesBook[$actualSpecies]["methods"][id]["size"] = { "number" => 0, "decimal" => 0, "string" => 0, "char" => 0, "logic" => 0 }
      $speciesBook[$actualSpecies]["methods"][id]["variables"] = Hash.new
      $speciesBook[$actualSpecies]["methods"][id]["argumentList"] = []
      $speciesBook[$actualSpecies]["methods"][id]["begin"] = $quadrupleVector.count()
      $actualMethod = id
      resetCounters("local")
    else
      abort("Semantic error: variable '#{id}' is already defined. Error on line: #{$line_number}")
    end
  end

  def newArgument(type, id)
    if $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] == nil
      unless isValidType(type)
        abort("Semantic error: species '#{type}' is not defined. Error on line: #{$line_number}")
      end
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] = Hash.new
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["type"] = $actualType
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["modifiable"] = $isVariable
      if $actualType == "number" || $actualType == "decimal" || $actualType == "string" || $actualType == "char" || $actualType == "logic"
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["location"] = locationGenerator(1, "local", $actualType)
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["size"][$actualType] += 1
      end
      arg = { "location" => $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["location"], "type" => type }
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["argumentList"].push(arg)
    else
      abort("Semantic error: argument '#{id}' is already defined in method '#{$actualMethod}'. Error on line: #{$line_number}")
    end
  end

  def expressionResultType(operator, leftOp, rightOp)
    # puts "Cube call with leftOp: #{leftOp}, rightOp: #{rightOp} and operator: #{operator} on line: #{$line_number}"
    if $semanticCube[leftOp][rightOp][operator] == nil
      abort("Semantic error: type mismatch. Cannot combine type '#{leftOp}' and type '#{rightOp}' with operator '#{operator}'. Error on line: #{$line_number}")
    end
    return $semanticCube[leftOp][rightOp][operator]
  end

  def newConstant(type, value)
    if $constantBook[value] == nil
      $constantBook[value] = locationGenerator(1, "constant", type)
    end
    return $constantBook[value]
  end

  def locationGenerator(size, scope, type)
    if $theMagicNumber - $magicCounter[scope][type] >= size
      location = $magicReference[scope][type] * $theMagicNumber + $magicCounter[scope][type]
      $magicCounter[scope][type] += size
      return location
    else
      abort("Compilation error: out of memory for a #{type} variable with the #{scope} scope. While compiling line: #{$line_number}")
    end
  end

  def resetCounters(scope)
    $magicCounter[scope]["number"] = 0
    $magicCounter[scope]["decimal"] = 0
    $magicCounter[scope]["string"] = 0
    $magicCounter[scope]["char"] = 0
    $magicCounter[scope]["logic"] = 0
  end

  def createExpressionQuadruple(operator, leftOp, rightOp, tempType)
    temporal = locationGenerator(1, "temporal", tempType)
    quadruple = [operator, leftOp, rightOp, temporal]
    $quadrupleVector.push(quadruple)
    return temporal
  end

  def createAssignQuadruple(operator, leftOpHash, rightOpHash)
    expressionResultType(operator, leftOpHash[0], rightOpHash[0])
    quadruple = [operator, nil, rightOpHash[1], leftOpHash[1]]
    $quadrupleVector.push(quadruple)
  end

  def createNotQuadruple(opHash)
    abort("Semantic error: you cannot negate a non-logic expression with '!'. Error on line: #{$line_number}") unless opHash[0] == "logic"
    result = locationGenerator(1, "temporal", "logic")
    quadruple = ["!", nil, opHash[1], result]
    $quadrupleVector.push(quadruple)
    return result
  end

  def createNegateExp(exp)
    abort("Semantic error: you cannot negate a non-numeric expression with '-'. Error on line: #{$line_number}") unless exp[0] == "number"
    result = locationGenerator(1, "temporal", "number")
    quadruple = ["negate", nil, exp[1], result]
    $quadrupleVector.push(quadruple)
    return result
  end

  def retrieveIdLocation(id)
    if $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] != nil
      return $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["location"]
    elsif idLocationRecursively($speciesBook[$actualSpecies], id) != nil
      return idLocationRecursively($speciesBook[$actualSpecies], id)
    else
      abort("Semantic error: variable '#{id}' not declared. Error on line: #{$line_number}")
    end
  end

  def retrieveIdType(id)
    if $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] != nil
      return $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["type"]
    elsif idTypeRecursively($speciesBook[$actualSpecies], id) != nil
      return idTypeRecursively($speciesBook[$actualSpecies], id)
    else
      abort("Semantic error: variable '#{id}' not declared. Error on line: #{$line_number}")
    end
  end

  def retrieveIdDimensions(id)
    if $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] != nil
      return $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["dimensions"]
    elsif idDimensionsRecursively($speciesBook[$actualSpecies], id) != nil
      return idDimensionsRecursively($speciesBook[$actualSpecies], id)
    else
      abort("Semantic error: dimensioned variable '#{id}' not declared. Error on line: #{$line_number}")
    end
  end

  def generateLogicControlQuadruple(exp, goToType)
    unless exp[0] == "logic"
      abort("Semantic error: type mismatch. Control expression is not logic type. Error on line: #{$line_number}")
    end
    action = "gotoF"
    if goToType
      action = "gotoT"
    end
    quadruple = [action, exp[1], nil, nil]
    $quadrupleVector.push(quadruple)
    $jumpStack.push($quadrupleVector.count()-1)
  end

  def generateDoWhileQuadruple(exp)
    unless exp[0] == "logic"
      abort("Semantic error: type mismatch. Control expression is not logic type. Error on line: #{$line_number}")
    end
    retorno = $jumpStack.pop()
    quadruple = ["gotoV", exp[1], nil, retorno]
    $quadrupleVector.push(quadruple)
  end

  def endWhile()
    aux = $jumpStack.pop(2)
    quadruple = ["goto", nil, nil, aux[0]]
    $quadrupleVector.push(quadruple)
    fillQuadruple(aux[1])
  end

  def endIf()
    while $jumpStack.last() != "if" do
      fillQuadruple($jumpStack.pop())
    end
    $jumpStack.pop()
  end

  def generateElse()
    quadruple = ["goto", nil, nil, nil]
    $quadrupleVector.push(quadruple)
    fillQuadruple($jumpStack.pop())
    $jumpStack.push($quadrupleVector.count()-1)
  end

  def fillQuadruple(index)
    $quadrupleVector[index][3] = $quadrupleVector.count()
  end

  def endFunk(exp)
    type = $speciesBook[$actualSpecies]["methods"][$actualMethod]["type"]
    abort("Semantic error: type mismatch in reply expression. Error on line: #{$line_number}") if type != exp[0] && exp[0] != nil
    abort("Semantic error: oblivion funks cannot have reply. Error on line: #{$line_number}") if type == "oblivion" && exp[0] != nil
    if $actualMethod != "chief"
      $quadrupleVector.push(["return", nil, nil, exp[1]])
    else
      $quadrupleVector.push(["terminate", nil, nil, exp[1]])
    end
  end

  def validateFunk()
    if $argumentCount != 0
      $argumentCountStack.push($argumentCount)
    end
    $argumentCount = 0
    $funkGlobalContext = false
    if $actualIdSpecies == nil
      $actualIdSpecies = $actualSpecies
      $funkGlobalContext = true
    end
    $speciesStack.push($actualIdSpecies)
    $idStack.push($actualIdFunk)
    funkHash = speciesHashOfFunkRecursively($speciesBook[$actualIdSpecies], $actualIdFunk)
    if funkHash != nil
      if funkHash["scope"] || $funkGlobalContext
        return funkHash["type"]
      else
        abort("Semantic error: method #{$actualIdFunk} is not open. Error on line: #{$line_number}")
      end
    else
      abort("Semantic error: method #{$actualIdFunk} not defined. Error on line: #{$line_number}")
    end
  end

  def generateArg(argument)
    funkHash = speciesHashOfFunkRecursively($speciesBook[$actualIdSpecies], $actualIdFunk)
    if $argumentCount >= funkHash["argumentList"].count()
      abort("Semantic error: wrong number of arguments for function #{$actualIdFunk}. Error on line: #{$line_number}")
    end
    expected = funkHash["argumentList"][$argumentCount]["type"]
    if expected == argument[0]
      quadruple = ["param", argument[1], [($argumentCount+1), funkHash["argumentList"].count], funkHash["argumentList"][$argumentCount]["location"]]
      $quadrupleVector.push(quadruple)
      $argumentCount += 1
    else
      abort("Semantic error: argument type mismatch in #{$actualIdFunk}, expected: '#{expected}' actual: '#{argument[0]}'. Error on line: #{$line_number}")
    end
  end

  def endFunkCall
    funkHash = speciesHashOfFunkRecursively($speciesBook[$actualIdSpecies], $actualIdFunk)
    if $argumentCount == funkHash["argumentList"].count()
      if $funkGlobalContext
        sendAttributesDirectly()
      else
        sendAttributes()
      end
      typeDir = funkHash["type"]
      if typeDir == "oblivion"
        typeDir = nil
      else
        typeDir = locationGenerator(1, "local", typeDir)
      end
      quadruple = ["gosub", funkHash["begin"], nil, typeDir]
      $quadrupleVector.push(quadruple)
      $speciesStack.pop
      $idStack.pop
      if $argumentCountStack.empty?
        $argumentCount = 0
      else
        $argumentCount = $argumentCountStack.pop
      end
      return typeDir
    else
      abort("Semantic error: wrong number of arguments for function #{$actualIdFunk}. Error on line: #{$line_number}")
    end
  end

  def createAtributtesRecursively(id, speciesHash)
    createAtributtesRecursively(id, speciesHash["father"]) if speciesHash["father"] != nil
    auxSpecies = $actualSpecies
    speciesHash["variables"].each do |key, h|
      $actualType = h["type"]
      $actualModifier = h["scope"]
      $isVariable = h["modifiable"]
      newVariable(id+"."+key)
    end
    $actualSpecies = auxSpecies
    $actualType = $speciesBook[$actualSpecies]["variables"][id]["type"]
    $actualModifier = $speciesBook[$actualSpecies]["variables"][id]["scope"]
    $isVariable = $speciesBook[$actualSpecies]["variables"][id]["modifiable"]
  end

  def validateAttribute(id)
    unless $speciesBook[$actualSpecies]["variables"][id]["scope"]
      attribute = id.split(".").last
      abort("Semantic error: attribute #{attribute} is not open. Error on line: #{$line_number}")
    end
  end

  def sendAttributes()
    $speciesBook[$actualSpecies]["variables"].each do |key, h|
      tokens = key.split(".")
      type = h["type"]
      isPrimitive = type == "number" || type == "decimal" || type == "char" || type == "string" || type == "logic"
      if tokens[0] == $actualId && tokens.count > 1 && isPrimitive
        destination = idLocationRecursively($speciesBook[$speciesBook[$actualSpecies]["variables"][tokens[0]]["type"]], key[key.index(".")+1..-1])
        quadruple = ["SEND_ATTR", destination, nil, h["location"]]
        $quadrupleVector.push(quadruple)
        if h["totalsize"] != nil
          for index in 1..h["totalsize"]-1
            quadruple = ["SEND_ATTR", destination, nil, h["location"]+index]
            $quadrupleVector.push(quadruple)
          end
        end
      end
    end
  end

  def sendAttributesDirectly()
    iterateClassVariablesRecursively($speciesBook[$actualSpecies])
  end

  def iterateClassVariablesRecursively(speciesHash)
    if speciesHash["father"] != nil
      iterateClassVariablesRecursively(speciesHash["father"])
    else
      speciesHash["variables"].each do |key, h|
        type = h["type"]
        isPrimitive = type == "number" || type == "decimal" || type == "char" || type == "string" || type == "logic"
        if isPrimitive
          quadruple = ["SEND_ATTR", h["location"], nil, h["location"]]
          $quadrupleVector.push(quadruple)
          if h["totalsize"] != nil
            for index in 1..h["totalsize"]-1
              quadruple = ["SEND_ATTR", h["location"]+index, nil, h["location"]+index]
              $quadrupleVector.push(quadruple)
            end
          end
        end
      end
    end
  end

  def speciesHashOfFunkRecursively(species, id)
    if species["methods"][id] != nil # regresa si la variable ya existe
      return species["methods"][id]
    elsif species["father"] == nil  # si la clase no tiene padre
      return nil
    else
      return speciesHashOfFunkRecursively(species["father"], id) # checa para su padre
    end
  end

  def idLocationRecursively(species, id)
    if species["variables"][id] != nil # regresa si la variable ya existe
      return species["variables"][id]["location"]
    elsif species["father"] == nil  # si la clase no tiene padre
      return nil
    else
      return idLocationRecursively(species["father"], id) # checa para su padre
    end
  end

  def idTypeRecursively(species, id)
    if species["variables"][id] != nil # regresa si la variable ya existe
      return species["variables"][id]["type"]
    elsif species["father"] == nil  # si la clase no tiene padre
      return nil
    else
      return idTypeRecursively(species["father"], id) # checa para su padre
    end
  end

  def idDimensionsRecursively(species, id)
    if species["variables"][id] != nil # regresa si la variable ya existe
      return species["variables"][id]["dimensions"]
    elsif species["father"] == nil  # si la clase no tiene padre
      return nil
    else
      return idDimensionsRecursively(species["father"], id) # checa para su padre
    end
  end

  def startArrayIndex()
    dim = retrieveIdDimensions($actualId)
    if dim != nil
      arrIndex = Hash.new
      arrIndex["dimensions"] = dim
      arrIndex["location"] = retrieveIdLocation($actualId)
      arrIndex["index"] = -1
      $arrayIndexStack.push(arrIndex)
    end
  end

  def newDimensionIndex(index)
    abort("Semantic error: you can only use numbers to refer a dimension index. Error on line: #{$line_number}") unless index[0] == "number"
    $arrayIndexStack.last["index"] += 1
    abort("Semantic error: wrong nunmber of dimensions, the variable you're accessing has less dimensions. Error on line: #{$line_number}") unless $arrayIndexStack.last["index"] < $arrayIndexStack.last["dimensions"].count
    sl = $arrayIndexStack.last["dimensions"][$arrayIndexStack.last["index"]]["sl"]
    il = $arrayIndexStack.last["dimensions"][$arrayIndexStack.last["index"]]["il"]
    $quadrupleVector.push(["verify", sl, il, index[1]])
    temp = -1
    if $arrayIndexStack.last["index"] != $arrayIndexStack.last["dimensions"].count - 1
      temp = locationGenerator(1,"temporal","number")
      $quadrupleVector.push(["*SpecialRight", index[1], $arrayIndexStack.last["dimensions"][$arrayIndexStack.last["index"]]["m"], temp])
      if $arrayIndexStack.last["index"] > 0
        aux = temp
        temp = locationGenerator(1,"temporal","number")
        $quadrupleVector.push(["+", aux, $arrayIndexStack.last["temporal"], temp])
        $arrayIndexStack.last["temporal"] = temp
      end
    elsif $arrayIndexStack.last["index"] > 0
      temp = locationGenerator(1,"temporal","number")
      $quadrupleVector.push(["+", index[1], $arrayIndexStack.last["temporal"], temp])
      $arrayIndexStack.last["temporal"] = temp
    else
      temp = index[1]
    end
    $arrayIndexStack.last["temporal"] = temp
  end

  def endArrayAccess()
     abort("Semantic error: wrong nunmber of dimensions, the variable you're accessing has more dimensions. Error on line: #{$line_number}") unless $arrayIndexStack.last["index"] == $arrayIndexStack.last["dimensions"].count - 1
     temp = locationGenerator(1,"temporal","number")
     $quadrupleVector.push(["+SpecialRight", $arrayIndexStack.last["temporal"], $arrayIndexStack.last["dimensions"][$arrayIndexStack.last["index"]]["k"], temp])
     aux = temp
     temp = locationGenerator(1,"temporal","number")
     $quadrupleVector.push(["+SpecialRight", aux, $arrayIndexStack.last["location"], temp])
     $arrayIndexStack.pop
     return temp.to_f
  end

  def terminateCompilation()
    $constantBook.each do |key, value|
      $constantCounterBook[value] = key
    end
    File.open('constants.yaml', 'w') { |fo| fo.puts $constantCounterBook.to_yaml }
    File.open('quadruples.yaml', 'w') { |fo| fo.puts $quadrupleVector.to_yaml }
  end
...end objective_plox_bison.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   128,   164,   128,    49,   128,   129,   128,   129,    22,   129,
   -77,   129,    78,    20,    21,    79,    50,   123,   164,   167,
   163,   226,   188,   225,   164,   167,   163,    89,   122,    89,
   222,    89,   190,    89,   164,   121,   136,   132,   136,   132,
   136,   132,   136,   132,   128,   164,   167,   163,   -79,   129,
   162,   130,   131,   130,   131,   130,   131,   130,   131,   135,
   137,   135,   137,   135,   137,   135,   137,   162,   -79,   192,
   128,    89,   128,   162,   128,   129,   226,   129,   225,   129,
   136,   132,   195,   162,    20,    21,   164,   167,   163,   165,
   166,    20,    21,   120,   162,   130,   131,    89,   117,    89,
   128,    89,   114,   135,   137,   129,   136,   132,   136,   132,
   136,   132,   128,    28,    29,    28,    29,   129,    20,    21,
    79,   130,   131,   130,   131,   130,   131,    89,   138,   135,
   137,   135,   137,   135,   137,   162,   136,   132,   128,    89,
   128,    82,   128,   129,    66,   129,    75,   129,   136,   132,
    60,   130,   131,    73,   164,   167,   163,   165,   166,   135,
   137,    72,    71,   130,   131,    89,    68,    89,   128,    89,
    67,   135,   137,   129,   136,   132,   136,   132,   136,   132,
   128,   162,    66,    60,   211,   129,   213,    47,    79,   130,
   131,   130,   131,   130,   131,    89,   215,   135,   137,   135,
   137,   135,   137,   162,   136,   132,   128,    89,   128,    79,
   128,   129,   217,   129,    57,   129,   136,   132,    56,   130,
   131,   220,   164,   167,   163,   165,   166,   135,   137,   221,
    53,   130,   131,    89,    51,    89,   128,    89,    47,   135,
   137,   129,   136,   132,   136,   132,   136,   132,   128,   162,
   139,    26,    89,   129,   160,    26,   187,   130,   131,   130,
   131,   130,   131,    89,   179,   135,   137,   135,   137,   135,
   137,   162,   136,   132,   128,    89,   128,    15,   128,   129,
    14,   129,    13,   129,   136,   132,    11,   130,   131,    79,
   164,   167,   163,   165,   166,   135,   137,     9,     8,   130,
   131,    89,   187,    89,   128,    89,   230,   135,   137,   129,
   136,   132,   136,   132,   136,   132,   128,     4,   222,     5,
    79,   129,    79,     4,   nil,   130,   131,   130,   131,   130,
   131,    89,   nil,   135,   137,   135,   137,   135,   137,   162,
   136,   132,   128,    89,   128,   nil,   128,   129,   nil,   129,
   nil,   129,   136,   132,   nil,   130,   131,   nil,   164,   167,
   163,   165,   166,   135,   137,   nil,   nil,   130,   131,    89,
   nil,    89,   128,    89,   nil,   135,   137,   129,   136,   132,
   136,   132,   136,   132,   128,   nil,   nil,   nil,   nil,   129,
   nil,   nil,   nil,   130,   131,   130,   131,   130,   131,    89,
   nil,   135,   137,   135,   137,   135,   137,   162,   136,   132,
   128,    89,   128,   nil,   128,   129,   nil,   129,   nil,   129,
   136,   132,   nil,   130,   131,   nil,   164,   167,   163,   165,
   166,   135,   137,   nil,   nil,   130,   131,    89,   nil,    89,
   128,    89,   nil,   135,   137,   129,   136,   132,   136,   132,
   136,   132,   128,   nil,   nil,   nil,   nil,   129,   nil,   nil,
   nil,   130,   131,   130,   131,   130,   131,    89,   nil,   135,
   137,   135,   137,   135,   137,   162,   136,   132,   128,    89,
   nil,   nil,   nil,   129,   nil,   nil,   nil,   nil,   136,   132,
   nil,   130,   131,   nil,   nil,   nil,   nil,   nil,   nil,   135,
   137,   nil,   nil,   130,   131,    89,   nil,   nil,   nil,   nil,
   nil,   135,   137,   nil,   136,   132,   164,   167,   163,   165,
   166,   168,   170,   169,   171,   172,   173,   174,   175,   130,
   131,   nil,   nil,   nil,   nil,   nil,   nil,   135,   137,   164,
   167,   163,   165,   166,   168,   170,   169,   171,   172,   173,
   174,   175,   164,   167,   163,   165,   166,   168,   170,   169,
   171,   172,   173,   174,   175,   162,    40,   nil,   nil,    89,
   nil,   nil,   nil,   nil,   nil,   nil,   210,   nil,   nil,   nil,
    36,    37,    38,    39,    41,    42,   nil,   nil,   162,    92,
    93,    98,   nil,   nil,   nil,   101,   nil,   102,   nil,   103,
   104,   162,   164,   167,   163,   165,   166,   168,   170,   169,
   171,   172,   173,   174,   175,   164,   167,   163,   165,   166,
   168,   170,   169,   171,   172,   173,   174,   175,   106,   107,
   108,   109,   110,   111,   112,   113,   161,   164,   167,   163,
   165,   166,   168,   170,   169,   171,   172,   173,   174,   175,
   nil,   162,   164,   167,   163,   165,   166,   168,   170,   169,
   171,   172,   173,   nil,   162,   164,   167,   163,   165,   166,
   168,   170,   169,   171,   172,   173,   174,   175,   nil,   nil,
   nil,   nil,    89,   nil,   nil,   nil,   162,   164,   167,   163,
   165,   166,   168,   170,   169,   171,   172,   173,   174,   175,
   nil,   162,    92,    93,    98,   nil,   nil,   nil,   101,   nil,
   102,    79,   103,   104,   162,   164,   167,   163,   165,   166,
   168,   170,   169,   171,   172,   173,   174,   175,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   162,   164,   167,   163,
   165,   166,   168,   170,   169,   171,   172,   173,   174,   175,
   164,   167,   163,   165,   166,   168,   170,   169,   171,   172,
   173,   174,   175,   nil,   162,   164,   167,   163,   165,   166,
   168,   170,   169,   171,   172,   173,   174,   175,    40,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   162,   191,   nil,   nil,
   nil,   nil,    36,    37,    38,    39,    41,    42,   nil,   162,
   164,   167,   163,   165,   166,   168,   170,   169,   171,   172,
   173,   174,   175,   nil,   162,   164,   167,   163,   165,   166,
   168,   170,   169,   171,   172,   173,   174,   175,   164,   167,
   163,   165,   166,   168,   170,   169,   171,   172,   173,   174,
   175,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   162,
   164,   167,   163,   165,   166,   168,   170,   169,   171,   172,
   173,   nil,   nil,   nil,   162,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   162,   164,   167,
   163,   165,   166,   168,   170,   169,   171,   172,   173,   174,
   175,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   162,
   164,   167,   163,   165,   166,   168,   170,   169,   171,   172,
   173,   174,   175,   nil,    40,   nil,   nil,   nil,   nil,   nil,
    40,   nil,   nil,   nil,   nil,   nil,    40,   162,    36,    37,
    38,    39,    41,    42,    36,    37,    38,    39,    41,    42,
    36,    37,    38,    39,    41,    42,   nil,   nil,   nil,   162 ]

racc_action_check = [
   108,   197,   232,    43,   116,   108,   215,   232,    16,   116,
    89,   215,    68,    84,    84,    68,    43,    93,   177,   177,
   177,   214,   154,   214,   199,   199,   199,   108,    92,   232,
   195,   116,   157,   215,   201,    91,   108,   108,   232,   232,
   116,   116,   215,   215,   143,   200,   200,   200,    89,   143,
   197,   108,   108,   232,   232,   116,   116,   215,   215,   108,
   108,   232,   232,   116,   116,   215,   215,   177,   195,   159,
   113,   143,   112,   199,   111,   113,   236,   112,   236,   111,
   143,   143,   160,   201,    14,    14,   202,   202,   202,   202,
   202,    18,    18,    90,   200,   143,   143,   113,    88,   112,
   110,   111,    86,   143,   143,   110,   113,   113,   112,   112,
   111,   111,   109,    19,    19,    25,    25,   109,    79,    79,
   142,   113,   113,   112,   112,   111,   111,   110,    99,   113,
   113,   112,   112,   111,   111,   202,   110,   110,   119,   109,
   107,    75,   106,   119,    74,   107,    67,   106,   109,   109,
    66,   110,   110,    65,   203,   203,   203,   203,   203,   110,
   110,    64,    63,   109,   109,   119,    61,   107,   101,   106,
    60,   109,   109,   101,   119,   119,   107,   107,   106,   106,
    98,   176,    59,    55,   180,    98,   181,    53,   183,   119,
   119,   107,   107,   106,   106,   101,   184,   119,   119,   107,
   107,   106,   106,   203,   101,   101,   169,    98,   122,   185,
   141,   169,   186,   122,    48,   141,    98,    98,    46,   101,
   101,   191,   204,   204,   204,   204,   204,   101,   101,   192,
    45,    98,    98,   169,    44,   122,   163,   141,    35,    98,
    98,   163,   169,   169,   122,   122,   141,   141,   164,   198,
   100,    24,   123,   164,   125,    17,   152,   169,   169,   122,
   122,   141,   141,   163,   139,   169,   169,   122,   122,   141,
   141,   204,   163,   163,   165,   164,   166,    13,   190,   165,
    12,   166,    10,   190,   164,   164,     8,   163,   163,   213,
   205,   205,   205,   205,   205,   163,   163,     5,     4,   164,
   164,   165,   218,   166,   187,   190,   222,   164,   164,   187,
   165,   165,   166,   166,   190,   190,   167,     3,   230,     1,
   233,   167,   234,     0,   nil,   165,   165,   166,   166,   190,
   190,   187,   nil,   165,   165,   166,   166,   190,   190,   205,
   187,   187,   168,   167,   132,   nil,   128,   168,   nil,   132,
   nil,   128,   167,   167,   nil,   187,   187,   nil,   206,   206,
   206,   206,   206,   187,   187,   nil,   nil,   167,   167,   168,
   nil,   132,   175,   128,   nil,   167,   167,   175,   168,   168,
   132,   132,   128,   128,   174,   nil,   nil,   nil,   nil,   174,
   nil,   nil,   nil,   168,   168,   132,   132,   128,   128,   175,
   nil,   168,   168,   132,   132,   128,   128,   206,   175,   175,
   129,   174,   173,   nil,   172,   129,   nil,   173,   nil,   172,
   174,   174,   nil,   175,   175,   nil,   207,   207,   207,   207,
   207,   175,   175,   nil,   nil,   174,   174,   129,   nil,   173,
   171,   172,   nil,   174,   174,   171,   129,   129,   173,   173,
   172,   172,   170,   nil,   nil,   nil,   nil,   170,   nil,   nil,
   nil,   129,   129,   173,   173,   172,   172,   171,   nil,   129,
   129,   173,   173,   172,   172,   207,   171,   171,   162,   170,
   nil,   nil,   nil,   162,   nil,   nil,   nil,   nil,   170,   170,
   nil,   171,   171,   nil,   nil,   nil,   nil,   nil,   nil,   171,
   171,   nil,   nil,   170,   170,   162,   nil,   nil,   nil,   nil,
   nil,   170,   170,   nil,   162,   162,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,   162,
   162,   nil,   nil,   nil,   nil,   nil,   nil,   162,   162,   178,
   178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
   178,   178,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   145,    57,   nil,   nil,    87,
   nil,   nil,   nil,   nil,   nil,   nil,   178,   nil,   nil,   nil,
    57,    57,    57,    57,    57,    57,   nil,   nil,   178,    87,
    87,    87,   nil,   nil,   nil,    87,   nil,    87,   nil,    87,
    87,   182,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,    85,    85,
    85,    85,    85,    85,    85,    85,   127,   196,   196,   196,
   196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
   nil,   147,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   nil,   127,   148,   148,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   148,   148,   nil,   nil,
   nil,   nil,    83,   nil,   nil,   nil,   196,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
   nil,   208,    83,    83,    83,   nil,   nil,   nil,    83,   nil,
    83,   140,    83,    83,   148,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   140,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   nil,   149,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,    62,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   146,   158,   nil,   nil,
   nil,   nil,    62,    62,    62,    62,    62,    62,   nil,   158,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   nil,   156,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   nil,   nil,   nil,   151,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   150,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   209,
   144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   nil,    71,   nil,   nil,   nil,   nil,   nil,
    30,   nil,   nil,   nil,   nil,   nil,    33,   227,    71,    71,
    71,    71,    71,    71,    30,    30,    30,    30,    30,    30,
    33,    33,    33,    33,    33,    33,   nil,   nil,   nil,   144 ]

racc_action_pointer = [
   297,   319,   nil,   291,   271,   297,   nil,   nil,   256,   nil,
   251,   nil,   252,   247,    50,   nil,   -21,   213,    57,    81,
   nil,   nil,   nil,   nil,   209,    83,   nil,   nil,   nil,   nil,
   890,   nil,   nil,   896,   nil,   208,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -27,   209,   194,   180,   nil,   174,   nil,
   nil,   nil,   nil,   157,   nil,   144,   nil,   536,   nil,   146,
   168,   125,   748,   126,   131,   116,   111,   144,   -13,   nil,
   nil,   884,   nil,   nil,   108,   102,   nil,   nil,   nil,    84,
   nil,   nil,   nil,   652,   -21,   611,    73,   539,    60,     8,
    53,    10,   -12,   -23,   nil,   nil,   nil,   nil,   177,   103,
   248,   165,   nil,   nil,   nil,   nil,   139,   137,    -3,   109,
    97,    71,    69,    67,   nil,   nil,     1,   nil,   nil,   135,
   nil,   nil,   205,   222,   nil,   252,   nil,   611,   343,   407,
   nil,   nil,   341,   nil,   nil,   nil,   nil,   nil,   nil,   234,
   683,   207,    92,    41,   896,   512,   733,   598,   661,   711,
   824,   811,   220,   796,   -19,   nil,   761,    -4,   746,    28,
    52,   nil,   475,   233,   245,   271,   273,   313,   339,   203,
   449,   437,   411,   409,   381,   369,   128,    14,   535,   nil,
   159,   129,   548,   160,   135,   181,   175,   301,   nil,   nil,
   275,   196,   204,   nil,   nil,    28,   633,    -3,   196,    20,
    41,    30,    82,   150,   218,   286,   354,   422,   648,   846,
   nil,   nil,   nil,   261,   -36,     3,   nil,   nil,   266,   nil,
   nil,   nil,   276,   nil,   nil,   nil,   nil,   874,   nil,   nil,
   316,   nil,    -1,   292,   294,   nil,    19,   nil ]

racc_action_default = [
    -2,  -138,    -1,    -2,  -138,  -138,    -3,    -4,  -138,   238,
    -7,    -6,  -138,  -138,   -10,    -8,  -138,   -12,   -10,   -17,
   -19,   -20,    -5,    -9,   -12,   -47,   -46,   -11,   -14,   -15,
  -138,   -18,   -13,  -138,   -48,  -138,   -55,   -56,   -57,   -58,
   -59,   -60,   -61,  -138,  -138,   -24,   -26,   -23,  -138,   -49,
   -50,   -16,   -21,  -138,   -22,  -138,   -28,   -51,   -25,   -29,
  -138,  -138,   -51,   -63,  -138,  -138,  -138,  -138,  -138,   -52,
   -62,  -138,   -85,   -27,   -29,  -138,   -45,   -53,   -54,   -66,
   -64,   -30,   -31,   -68,   -66,  -138,  -138,   -68,   -74,   -76,
  -138,  -138,  -138,  -138,   -89,   -90,   -91,   -92,  -138,  -138,
  -138,  -138,  -132,  -131,  -131,   -67,  -138,  -138,  -138,  -138,
  -138,  -138,  -138,  -138,   -65,   -69,  -138,   -41,   -75,   -83,
   -80,   -86,  -138,  -138,   -70,  -138,   -73,  -138,  -138,  -138,
  -112,  -113,  -138,  -115,  -116,  -135,  -136,  -137,   -94,  -138,
  -138,  -138,  -138,  -138,   -32,   -33,   -34,   -35,   -36,   -37,
   -38,   -39,   -42,   -44,  -138,   -84,  -118,  -119,  -138,  -138,
  -138,   -93,  -138,  -138,  -138,  -138,  -138,  -138,  -138,  -138,
  -138,  -138,  -138,  -138,  -138,  -138,  -108,  -109,  -138,   -79,
  -138,  -122,  -133,  -138,  -138,  -138,  -138,  -138,   -78,  -117,
  -138,  -138,  -138,   -71,   -72,   -81,   -96,   -97,   -98,   -99,
  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -107,  -110,  -111,
  -114,   -95,  -121,  -138,  -125,  -138,  -130,   -40,   -42,  -120,
   -87,   -88,  -138,  -123,  -124,  -134,  -134,  -129,  -128,   -43,
   -81,   -82,  -138,  -138,  -138,  -127,  -125,  -126 ]

racc_goto_table = [
    77,   183,   152,   185,   186,   194,   224,    59,   232,   233,
    23,   127,    99,    44,   140,    65,    99,    32,    74,   144,
   145,   146,   147,   148,   149,   150,   151,   155,   237,   153,
    81,    58,   156,    31,    35,   158,    86,    43,    83,    34,
   115,   176,   177,   105,    84,   178,    61,    33,    85,    84,
   100,    69,    85,    17,   100,     2,    48,    27,     6,   142,
   143,    76,    80,   116,    70,   118,    55,   231,   180,   159,
   229,    54,   181,   218,   184,   196,   197,   198,   199,   200,
   201,   202,   203,   204,   205,   206,   207,   208,   209,   193,
    52,    30,   234,   119,   154,    16,   189,   212,   219,   141,
   153,    12,    10,   156,     7,     1,   228,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   214,   nil,   216,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   227,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   223,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   235,   236 ]

racc_goto_check = [
    37,    61,    29,    61,    30,    46,    62,    22,    63,    63,
     9,    26,    45,    16,    26,    23,    45,     9,    22,    26,
    26,    26,    26,    26,    26,    26,    26,    51,    62,    26,
    23,    16,    26,    12,    15,    26,    41,    15,    40,    12,
    41,    26,    26,    40,    10,    26,    34,    32,    25,    10,
    44,    34,    25,     8,    44,     2,    33,     8,     2,    64,
    64,    35,    36,    28,    39,    27,    21,    46,    45,    43,
    30,    20,    37,    29,    37,    26,    26,    26,    26,    26,
    26,    26,    26,    26,    26,    26,    26,    26,    26,    45,
    18,    14,    61,    49,    50,     7,    58,    59,    51,    60,
    26,     6,     5,    26,     4,     1,    65,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,   nil,    37,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,    37 ]

racc_goto_pointer = [
   nil,   105,    55,   nil,   100,    94,    91,    81,    39,    -7,
   -35,   nil,    14,   nil,    72,     4,   -22,   nil,    45,   nil,
    25,    20,   -48,   -44,   nil,   -35,   -87,   -23,   -25,  -114,
  -148,   nil,    22,    13,   -11,    -7,    -9,   -68,   nil,     1,
   -41,   -47,   nil,   -54,   -33,   -71,  -155,   nil,   nil,     3,
   -25,   -92,   nil,   nil,   nil,   nil,   nil,   nil,   -61,   -84,
    -3,  -140,  -208,  -217,   -44,  -109 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
    18,    24,   nil,    19,   nil,    64,   nil,    45,   nil,    46,
   nil,   nil,   nil,   nil,    91,   124,   182,   nil,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,    62,   nil,    63,   nil,
   nil,   nil,    87,   134,   125,   126,   nil,    88,    90,   nil,
   nil,   nil,    94,    95,    96,    97,   133,   157,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 65, :_reduce_1,
  0, 66, :_reduce_2,
  2, 66, :_reduce_3,
  2, 67, :_reduce_4,
  6, 68, :_reduce_5,
  1, 69, :_reduce_6,
  0, 70, :_reduce_7,
  2, 70, :_reduce_8,
  2, 71, :_reduce_9,
  0, 72, :_reduce_10,
  2, 72, :_reduce_11,
  0, 73, :_reduce_12,
  2, 73, :_reduce_13,
  1, 76, :_reduce_14,
  1, 76, :_reduce_15,
  5, 74, :_reduce_16,
  0, 78, :_reduce_17,
  1, 78, :_reduce_18,
  1, 77, :_reduce_19,
  1, 77, :_reduce_20,
  2, 80, :_reduce_21,
  2, 81, :_reduce_22,
  1, 83, :_reduce_23,
  0, 82, :_reduce_24,
  2, 82, :_reduce_25,
  0, 84, :_reduce_26,
  4, 84, :_reduce_27,
  1, 85, :_reduce_28,
  0, 87, :_reduce_29,
  3, 87, :_reduce_30,
  4, 86, :_reduce_31,
  3, 88, :_reduce_32,
  3, 88, :_reduce_33,
  3, 88, :_reduce_34,
  3, 88, :_reduce_35,
  3, 88, :_reduce_36,
  3, 88, :_reduce_37,
  3, 88, :_reduce_38,
  3, 88, :_reduce_39,
  4, 91, :_reduce_40,
  1, 92, :_reduce_41,
  0, 94, :_reduce_42,
  3, 94, :_reduce_43,
  1, 93, :_reduce_44,
  8, 75, :_reduce_45,
  1, 95, :_reduce_46,
  0, 96, :_reduce_47,
  1, 96, :_reduce_48,
  1, 97, :_reduce_49,
  1, 97, :_reduce_50,
  0, 98, :_reduce_51,
  2, 98, :_reduce_52,
  1, 99, :_reduce_53,
  1, 99, :_reduce_54,
  1, 79, :_reduce_55,
  1, 79, :_reduce_56,
  1, 79, :_reduce_57,
  1, 79, :_reduce_58,
  1, 79, :_reduce_59,
  1, 79, :_reduce_60,
  1, 79, :_reduce_61,
  2, 100, :_reduce_62,
  0, 103, :_reduce_63,
  2, 103, :_reduce_64,
  4, 101, :_reduce_65,
  0, 104, :_reduce_66,
  2, 104, :_reduce_67,
  0, 105, :_reduce_68,
  2, 105, :_reduce_69,
  1, 107, :_reduce_70,
  3, 107, :_reduce_71,
  3, 107, :_reduce_72,
  1, 107, :_reduce_73,
  1, 89, :_reduce_74,
  2, 89, :_reduce_75,
  1, 111, :_reduce_76,
  1, 108, :_reduce_77,
  4, 109, :_reduce_78,
  1, 112, :_reduce_79,
  1, 113, :_reduce_80,
  1, 110, :_reduce_81,
  3, 110, :_reduce_82,
  0, 114, :_reduce_83,
  1, 114, :_reduce_84,
  2, 102, :_reduce_85,
  2, 106, :_reduce_86,
  5, 106, :_reduce_87,
  5, 106, :_reduce_88,
  1, 106, :_reduce_89,
  1, 106, :_reduce_90,
  1, 106, :_reduce_91,
  1, 106, :_reduce_92,
  3, 106, :_reduce_93,
  2, 106, :_reduce_94,
  4, 106, :_reduce_95,
  3, 90, :_reduce_96,
  3, 90, :_reduce_97,
  3, 90, :_reduce_98,
  3, 90, :_reduce_99,
  3, 90, :_reduce_100,
  3, 90, :_reduce_101,
  3, 90, :_reduce_102,
  3, 90, :_reduce_103,
  3, 90, :_reduce_104,
  3, 90, :_reduce_105,
  3, 90, :_reduce_106,
  3, 90, :_reduce_107,
  2, 90, :_reduce_108,
  2, 90, :_reduce_109,
  3, 90, :_reduce_110,
  3, 90, :_reduce_111,
  1, 90, :_reduce_112,
  1, 90, :_reduce_113,
  3, 90, :_reduce_114,
  1, 90, :_reduce_115,
  1, 90, :_reduce_116,
  2, 115, :_reduce_117,
  1, 121, :_reduce_118,
  0, 122, :_reduce_119,
  2, 122, :_reduce_120,
  4, 116, :_reduce_121,
  0, 123, :_reduce_122,
  2, 123, :_reduce_123,
  5, 117, :_reduce_124,
  0, 126, :_reduce_125,
  5, 126, :_reduce_126,
  3, 126, :_reduce_127,
  5, 118, :_reduce_128,
  1, 129, :_reduce_129,
  4, 119, :_reduce_130,
  0, 128, :_reduce_131,
  0, 124, :_reduce_132,
  1, 125, :_reduce_133,
  0, 127, :_reduce_134,
  1, 120, :_reduce_135,
  1, 120, :_reduce_136,
  1, 120, :_reduce_137 ]

racc_reduce_n = 138

racc_shift_n = 238

racc_token_table = {
  false => 0,
  :error => 1,
  :POINT => 2,
  :NOT => 3,
  :MOD => 4,
  :MULT => 5,
  :DIV => 6,
  :PLUS => 7,
  :MINUS => 8,
  :MTHAN => 9,
  :MEQUAL => 10,
  :LTHAN => 11,
  :LEQUAL => 12,
  :EQUALITY => 13,
  :DIFFERENT => 14,
  :AND => 15,
  :OR => 16,
  :EQUAL => 17,
  :PLUSASSIGN => 18,
  :MINUSASSIGN => 19,
  :MULTASSIGN => 20,
  :DIVASSIGN => 21,
  :ORASSIGN => 22,
  :ANDASSIGN => 23,
  :MODASSIGN => 24,
  :SEMIC => 25,
  :HABEMVS => 26,
  :SPECIES => 27,
  :BLEFT => 28,
  :BRIGHT => 29,
  :ID => 30,
  :HEIROF => 31,
  :OPEN => 32,
  :HIDDEN => 33,
  :VAR => 34,
  :ETERNAL => 35,
  :COMA => 36,
  :SBRIGHT => 37,
  :SBLEFT => 38,
  :CTEN => 39,
  :PLEFT => 40,
  :PRIGHT => 41,
  :FUNK => 42,
  :CHIEF => 43,
  :LOGIC => 44,
  :CHAR => 45,
  :NUMBER => 46,
  :DECIMAL => 47,
  :OBLIVION => 48,
  :STRING => 49,
  :SAY => 50,
  :HEAR => 51,
  :REPLY => 52,
  :SUM => 53,
  :TRUE => 54,
  :FALSE => 55,
  :UNLESS => 56,
  :ELSE => 57,
  :IF => 58,
  :ELSIF => 59,
  :DO => 60,
  :WHILE => 61,
  :CTED => 62,
  :CTESTRING => 63 }

racc_nt_base = 64

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "POINT",
  "NOT",
  "MOD",
  "MULT",
  "DIV",
  "PLUS",
  "MINUS",
  "MTHAN",
  "MEQUAL",
  "LTHAN",
  "LEQUAL",
  "EQUALITY",
  "DIFFERENT",
  "AND",
  "OR",
  "EQUAL",
  "PLUSASSIGN",
  "MINUSASSIGN",
  "MULTASSIGN",
  "DIVASSIGN",
  "ORASSIGN",
  "ANDASSIGN",
  "MODASSIGN",
  "SEMIC",
  "HABEMVS",
  "SPECIES",
  "BLEFT",
  "BRIGHT",
  "ID",
  "HEIROF",
  "OPEN",
  "HIDDEN",
  "VAR",
  "ETERNAL",
  "COMA",
  "SBRIGHT",
  "SBLEFT",
  "CTEN",
  "PLEFT",
  "PRIGHT",
  "FUNK",
  "CHIEF",
  "LOGIC",
  "CHAR",
  "NUMBER",
  "DECIMAL",
  "OBLIVION",
  "STRING",
  "SAY",
  "HEAR",
  "REPLY",
  "SUM",
  "TRUE",
  "FALSE",
  "UNLESS",
  "ELSE",
  "IF",
  "ELSIF",
  "DO",
  "WHILE",
  "CTED",
  "CTESTRING",
  "$start",
  "supreme_plox",
  "plox_generation",
  "type_declaration",
  "class_declaration",
  "code_new_class",
  "code_heirof",
  "class_body",
  "class_variable_block",
  "class_function_block",
  "variable_declaration",
  "method_declaration",
  "modifier",
  "variable_is_modifiable",
  "variable_scope",
  "type_specifier",
  "some_variables",
  "code_new_variable",
  "next_variable",
  "new_var_id",
  "array_dec",
  "start_array",
  "bounds",
  "array_dec2",
  "variable_assignment",
  "id_reference",
  "expression",
  "array_call",
  "start_array_call",
  "array_index",
  "array_call2",
  "new_function_code",
  "method_declaration1",
  "method_declaration2",
  "method_declaration3",
  "method_declaration4",
  "parameter_list",
  "statement_block",
  "parameter",
  "parameter_list1",
  "statement_block1",
  "statement_block2",
  "statement",
  "reference_expression",
  "non_final_id",
  "function_call",
  "reference_expression5",
  "base_id",
  "funk_id",
  "start_funk",
  "reference_expression6",
  "arglist",
  "unless_statement",
  "if_statement",
  "do_statement",
  "while_statement",
  "literal_expression",
  "generate_arg",
  "arglist1",
  "unless_statement1",
  "push_if_floor",
  "validateLogicexp",
  "if_statement1",
  "generateElseCode",
  "push_cont_jump",
  "validateDoWhileExp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'objective_plox_bison.y', 14)
  def _reduce_1(val, _values, result)
     puts "OP! Programa compilado exitosamente."; terminateCompilation() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 17)
  def _reduce_2(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 18)
  def _reduce_3(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 21)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 24)
  def _reduce_5(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 27)
  def _reduce_6(val, _values, result)
     newSpecies(val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 30)
  def _reduce_7(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 31)
  def _reduce_8(val, _values, result)
     heirSpecies(val[1][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 34)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 37)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 38)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 41)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 42)
  def _reduce_13(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 45)
  def _reduce_14(val, _values, result)
     $actualModifier = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 46)
  def _reduce_15(val, _values, result)
     $actualModifier = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 49)
  def _reduce_16(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 52)
  def _reduce_17(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 53)
  def _reduce_18(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 56)
  def _reduce_19(val, _values, result)
     $actualModifier = false; $isVariable = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 57)
  def _reduce_20(val, _values, result)
     $actualModifier = false; $isVariable = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 60)
  def _reduce_21(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 63)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 66)
  def _reduce_23(val, _values, result)
     newVariable(val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 69)
  def _reduce_24(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 70)
  def _reduce_25(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 73)
  def _reduce_26(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 74)
  def _reduce_27(val, _values, result)
     defineArray() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 77)
  def _reduce_28(val, _values, result)
     newArray() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 80)
  def _reduce_29(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 81)
  def _reduce_30(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 84)
  def _reduce_31(val, _values, result)
     newDimension(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 87)
  def _reduce_32(val, _values, result)
     createAssignQuadruple(val[1][0], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 88)
  def _reduce_33(val, _values, result)
     createAssignQuadruple(val[1][0], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 89)
  def _reduce_34(val, _values, result)
     createAssignQuadruple(val[1][0], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 90)
  def _reduce_35(val, _values, result)
     createAssignQuadruple(val[1][0], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 91)
  def _reduce_36(val, _values, result)
     createAssignQuadruple(val[1][0], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 92)
  def _reduce_37(val, _values, result)
     createAssignQuadruple(val[1][0], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 93)
  def _reduce_38(val, _values, result)
     createAssignQuadruple(val[1][0], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 94)
  def _reduce_39(val, _values, result)
     createAssignQuadruple(val[1][0], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 97)
  def _reduce_40(val, _values, result)
     val[0][1] = endArrayAccess() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 100)
  def _reduce_41(val, _values, result)
     startArrayIndex() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 103)
  def _reduce_42(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 104)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 107)
  def _reduce_44(val, _values, result)
     newDimensionIndex(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 110)
  def _reduce_45(val, _values, result)
     endFunk([nil, nil]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 113)
  def _reduce_46(val, _values, result)
     $actualModifier = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 116)
  def _reduce_47(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 117)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 120)
  def _reduce_49(val, _values, result)
     newMethod(val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 121)
  def _reduce_50(val, _values, result)
     newMethod("chief"); fillQuadruple(0) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 124)
  def _reduce_51(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 125)
  def _reduce_52(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 128)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 129)
  def _reduce_54(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 133)
  def _reduce_55(val, _values, result)
     $actualType = "logic" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 134)
  def _reduce_56(val, _values, result)
     $actualType = "char" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 135)
  def _reduce_57(val, _values, result)
     $actualType = "number" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 136)
  def _reduce_58(val, _values, result)
     $actualType = "decimal" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 137)
  def _reduce_59(val, _values, result)
     $actualType = val[0][0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 138)
  def _reduce_60(val, _values, result)
     $actualType = "oblivion" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 139)
  def _reduce_61(val, _values, result)
     $actualType = "string" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 142)
  def _reduce_62(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 145)
  def _reduce_63(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 146)
  def _reduce_64(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 149)
  def _reduce_65(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 152)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 153)
  def _reduce_67(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 156)
  def _reduce_68(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 157)
  def _reduce_69(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 160)
  def _reduce_70(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 161)
  def _reduce_71(val, _values, result)
     val[0][0] = val[2][0]; val[0][1] = val[2][1]; $actualIdSpecies = $speciesStack.last; $actualIdFunk = $idStack.last 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 162)
  def _reduce_72(val, _values, result)
     val[0][0] = val[0][0] + "." + val[2][0]; validateAttribute(val[0][0]); val[0][1] = retrieveIdLocation(val[0][0]); val[0][0] = retrieveIdType(val[0][0]); $actualIdSpecies = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 163)
  def _reduce_73(val, _values, result)
     $actualIdSpecies = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 166)
  def _reduce_74(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 167)
  def _reduce_75(val, _values, result)
     val[0][1] = val[1][1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 170)
  def _reduce_76(val, _values, result)
     $actualId = val[0][0]; val[0][1] = retrieveIdLocation(val[0][0]); val[0][0] = retrieveIdType(val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 173)
  def _reduce_77(val, _values, result)
     $actualIdSpecies = retrieveIdType(val[0][0]); $actualId = val[0][0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 176)
  def _reduce_78(val, _values, result)
     val[0][0] = val[1][0]; val[0][1] = endFunkCall() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 179)
  def _reduce_79(val, _values, result)
     $actualIdFunk = val[0][0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 182)
  def _reduce_80(val, _values, result)
     val[0][0] = validateFunk() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 185)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 186)
  def _reduce_82(val, _values, result)
     val[0][0] = val[0][0] + "." + val[2][0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 189)
  def _reduce_83(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 190)
  def _reduce_84(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 193)
  def _reduce_85(val, _values, result)
     newArgument(val[0][0], val[1][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 196)
  def _reduce_86(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 197)
  def _reduce_87(val, _values, result)
    $quadrupleVector.push(["say", val[2][1], nil, nil])
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 198)
  def _reduce_88(val, _values, result)
    $quadrupleVector.push(["hear", val[2][0], nil, val[2][1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 199)
  def _reduce_89(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 200)
  def _reduce_90(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 201)
  def _reduce_91(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 202)
  def _reduce_92(val, _values, result)
     endWhile() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 203)
  def _reduce_93(val, _values, result)
     endFunk(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 204)
  def _reduce_94(val, _values, result)
     $actualIdSpecies = $speciesStack.last; $actualIdFunk = $idStack.last 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 205)
  def _reduce_95(val, _values, result)
     val[0][0] = val[2][0]; val[0][1] = val[2][1]; $actualIdSpecies = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 209)
  def _reduce_96(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 210)
  def _reduce_97(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 211)
  def _reduce_98(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 212)
  def _reduce_99(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 213)
  def _reduce_100(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 214)
  def _reduce_101(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 215)
  def _reduce_102(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 216)
  def _reduce_103(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 217)
  def _reduce_104(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 218)
  def _reduce_105(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 219)
  def _reduce_106(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 220)
  def _reduce_107(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 221)
  def _reduce_108(val, _values, result)
     val[0][0] = "logic";  val[0][1] = createNotQuadruple(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 222)
  def _reduce_109(val, _values, result)
     val[0][0] = "number"; val[0][1] = createNegateExp(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 223)
  def _reduce_110(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 224)
  def _reduce_111(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 225)
  def _reduce_112(val, _values, result)
     val[0][1] = $trueLocation 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 226)
  def _reduce_113(val, _values, result)
     val[0][1] = $falseLocation 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 227)
  def _reduce_114(val, _values, result)
     val[0][0] = val[1][0]; val[0][1] = val[1][1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 228)
  def _reduce_115(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 229)
  def _reduce_116(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 232)
  def _reduce_117(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 235)
  def _reduce_118(val, _values, result)
     generateArg(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 238)
  def _reduce_119(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 239)
  def _reduce_120(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 242)
  def _reduce_121(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 245)
  def _reduce_122(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 246)
  def _reduce_123(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 249)
  def _reduce_124(val, _values, result)
     endIf() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 252)
  def _reduce_125(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 253)
  def _reduce_126(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 254)
  def _reduce_127(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 257)
  def _reduce_128(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 260)
  def _reduce_129(val, _values, result)
     generateDoWhileQuadruple(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 263)
  def _reduce_130(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 266)
  def _reduce_131(val, _values, result)
     $jumpStack.push($quadrupleVector.count()) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 269)
  def _reduce_132(val, _values, result)
     $jumpStack.push("if") 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 272)
  def _reduce_133(val, _values, result)
     generateLogicControlQuadruple(val[0], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 275)
  def _reduce_134(val, _values, result)
     generateElse() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 278)
  def _reduce_135(val, _values, result)
     val[0][1] = newConstant(val[0][0], val[0][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 279)
  def _reduce_136(val, _values, result)
     val[0][1] = newConstant(val[0][0], val[0][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 280)
  def _reduce_137(val, _values, result)
     val[0][1] = newConstant(val[0][0], val[0][1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ObjectivePlox
