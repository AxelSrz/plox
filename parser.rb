#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


  require_relative 'lexer'  # Se agrega el lexer al programa de racc.
  require 'yaml'
  require "awesome_print"
  $line_number = 0          # Se inicializa la variable que guarda el numero de linea en la cual se encuentra el error.
  $speciesBook = Hash.new{}
  $actualSpecies
  $actualModifier
  $isVariable
  $actualType
  $actualMethod
  $actualScope
  $operatorStack = Array.new
  $operandStack = Array.new
  $quadrupleVector = Array.new
  first = ["goto", nil, nil, nil]
  $quadrupleVector.push(first)
  $constantBook = Hash.new
  $constantCounterBook = Hash.new
  $theMagicNumber = 10000
  $magicReference = {
    "global" => {
      "number" => 0,
      "decimal" => 1,
      "string" => 2,
      "char" => 3,
      "logic" => 4
    },
    "local" => {
      "number" => 5,
      "decimal" => 6,
      "string" => 7,
      "char" => 8,
      "logic" => 9
    },
    "temporal" => {
      "number" => 10,
      "decimal" => 11,
      "string" => 12,
      "char" => 13,
      "logic" => 14
    },
    "constant" => {
      "number" => 15,
      "decimal" => 16,
      "string" => 17,
      "char" => 18,
      "logic" => 19
    }
  }
  $magicCounter = {
    "global" => {
      "number" => 0,
      "decimal" => 0,
      "string" => 0,
      "char" => 0,
      "logic" => 0
    },
    "local" => {
      "number" => 0,
      "decimal" => 0,
      "string" => 0,
      "char" => 0,
      "logic" => 0
    },
    "temporal" => {
      "number" => 0,
      "decimal" => 0,
      "string" => 0,
      "char" => 0,
      "logic" => 0
    },
    "constant" => {
      "number" => 0,
      "decimal" => 0,
      "string" => 0,
      "char" => 0,
      "logic" => 0
    }
  }
  $semanticCube = {
    "logic" => {
      "logic" => {
        "!=" => "logic",
        "||=" => "logic",
        "&&=" => "logic",
        "==" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "logic"
      },
      "char" => {
      },
      "number" => {
      },
      "decimal" => {
      },
      "string" => {
      },
      "hear" => {
        "!=" => "logic",
        "||=" => "logic",
        "&&=" => "logic",
        "==" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "logic"
      }
    },
    "char" => {
      "logic" => {
      },
      "char" => {
        "!=" => "logic",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "char",
        "<" => "logic",
        ">" => "logic"
      },
      "number" => {
      },
      "decimal" => {
      },
      "string" => {
      },
      "hear" => {
        "!=" => "logic",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "char",
        "<" => "logic",
        ">" => "logic"
      }
    },
    "number" => {
      "logic" => {
      },
      "char" => {
      },
      "number" => {
        "!=" => "logic",
        "+=" => "number",
        "-=" => "number",
        "*=" => "number",
        "/=" => "number",
        "%=" => "number",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "number",
        "*" => "number",
        "/" => "number",
        "+" => "number",
        "-" => "number",
        "=" => "number",
        "<" => "logic",
        ">" => "logic"
      },
      "decimal" => {
        "!=" => "logic",
        "+=" => "number",
        "-=" => "number",
        "*=" => "number",
        "/=" => "number",
        "%=" => "number",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "number",
        "*" => "number",
        "/" => "number",
        "+" => "number",
        "-" => "number",
        "=" => "number",
        "<" => "logic",
        ">" => "logic"
      },
      "string" => {
      },
      "hear" => {
        "!=" => "logic",
        "+=" => "number",
        "-=" => "number",
        "*=" => "number",
        "/=" => "number",
        "%=" => "number",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "number",
        "*" => "number",
        "/" => "number",
        "+" => "number",
        "-" => "number",
        "=" => "number",
        "<" => "logic",
        ">" => "logic"
      }
    },
    "decimal" => {
      "logic" => {
      },
      "char" => {
      },
      "number" => {
        "!=" => "logic",
        "+=" => "number",
        "-=" => "number",
        "*=" => "number",
        "/=" => "number",
        "%=" => "number",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "number",
        "*" => "number",
        "/" => "number",
        "+" => "number",
        "-" => "number",
        "=" => "number",
        "<" => "logic",
        ">" => "logic"
      },
      "decimal" => {
        "!=" => "logic",
        "+=" => "decimal",
        "-=" => "decimal",
        "*=" => "decimal",
        "/=" => "decimal",
        "%=" => "decimal",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "decimal",
        "*" => "decimal",
        "/" => "decimal",
        "+" => "decimal",
        "-" => "decimal",
        "=" => "decimal",
        "<" => "logic",
        ">" => "logic"
      },
      "string" => {
      },
      "hear" => {
        "!=" => "logic",
        "+=" => "decimal",
        "-=" => "decimal",
        "*=" => "decimal",
        "/=" => "decimal",
        "%=" => "decimal",
        "==" => "logic",
        "<=" => "logic",
        ">=" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "%" => "decimal",
        "*" => "decimal",
        "/" => "decimal",
        "+" => "decimal",
        "-" => "decimal",
        "=" => "decimal",
        "<" => "logic",
        ">" => "logic"
      }
    },
    "string" => {
      "logic" => {
      },
      "char" => {
      },
      "number" => {
      },
      "decimal" => {
      },
      "string" => {
        "!=" => "logic",
        "==" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "string",
      },
      "hear" => {
        "!=" => "logic",
        "==" => "logic",
        "&&" => "logic",
        "||" => "logic",
        "=" => "string",
      }
    }
  }
  $falseLocation = $magicReference["constant"]["logic"] * $theMagicNumber
  $trueLocation = $falseLocation + 1
  $jumpStack = Array.new
  $actualIdSpecies = nil
  $actualFunkType
  $funkGlobalContext
  $actualId
  $argumentCount = 0
  $argumentCountStack = []
  $funkSpecies

  $constantBook[false] = $magicReference["constant"]["logic"] * $theMagicNumber
  $constantBook[true] = $constantBook[false] + 1

class ObjectivePlox < Racc::Parser

module_eval(<<'...end objective_plox_bison.y/module_eval...', 'objective_plox_bison.y', 601)

  # Se importa esta funcion perteneciente a la gema de racc. Se realiza una modificacion
  # Funcion que lee un archivo como entrada.
  def parse(input)
    scan_file(input)
  end

  # para poder desplegar la linea en la que se encuentra el error.
  def on_error(t, val, vstack)
    raise ParseError, sprintf("\nParsing error on value %s (%s) found on line: %i", val[0].inspect, token_to_str(t) || '?', $line_number)
  end

  def newSpecies(species)
    if $speciesBook[species] == nil
      $speciesBook[species] = Hash.new
      $speciesBook[species]["methods"] = Hash.new
      $speciesBook[species]["variables"] = Hash.new
      $speciesBook[species]["size"] = { "number" => 0, "decimal" => 0, "string" => 0, "char" => 0, "logic" => 0 }
      $actualSpecies = species
      $actualMethod = "species"
      resetCounters("global")
    else
      abort("Semantic error: species '#{species}' is already defined. Error on line: #{$line_number}")
    end
  end

  def heirSpecies(father)
    if $speciesBook[father] != nil
      $speciesBook[$actualSpecies]["father"] = $speciesBook[father]
      $magicCounter["global"] = $speciesBook[father]["size"].clone
    else
      abort("Semantic error: '#{father}' father of species '#{$actualSpecies}' is not defined. Error on line: #{$line_number}")
    end
  end

  def newVariable(id)
    if $actualMethod == "species"
      unless idDeclaredInSpeciesRecursively($speciesBook[$actualSpecies], id, "variables")
        abort("Semantic error: species '#{$actualType}' is not defined. Error on line: #{$line_number}") unless isValidType($actualType)
        abort("Semantic error: you cannot have recursive species definitions. Error on line: #{$line_number}") if $actualType == $actualSpecies
        $speciesBook[$actualSpecies]["variables"][id] = Hash.new
        $speciesBook[$actualSpecies]["variables"][id]["type"] = $actualType
        $speciesBook[$actualSpecies]["variables"][id]["scope"] = $actualModifier
        $speciesBook[$actualSpecies]["variables"][id]["modifiable"] = $isVariable
        if $actualType == "number" || $actualType == "decimal" || $actualType == "string" || $actualType == "char" || $actualType == "logic"
          $speciesBook[$actualSpecies]["variables"][id]["location"] = locationGenerator(1, "global", $actualType)
          $speciesBook[$actualSpecies]["size"][$actualType] += 1
        else
          createAtributtesRecursively(id, $speciesBook[$actualType])
        end
      else
        abort("Semantic error: variable '#{id}' is already defined. Error on line: #{$line_number}")
      end
    else
      if $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] == nil
        unless isValidType($actualType)
          abort("Semantic error: species '#{$actualType}' is not defined. Error on line: #{$line_number}")
        end
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] = Hash.new
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["type"] = $actualType
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["modifiable"] = $isVariable
        if $actualType == "number" || $actualType == "decimal" || $actualType == "string" || $actualType == "char" || $actualType == "logic"
          $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["location"] = locationGenerator(1, "local", $actualType)
          $speciesBook[$actualSpecies]["methods"][$actualMethod]["size"][$actualType] += 1
        end
      else
        abort("Semantic error: variable '#{id}' is already defined in method '#{$actualMethod}'. Error on line: #{$line_number}")
      end
    end
  end

  def idDeclaredInSpeciesRecursively(species, id, type)
    if species[type][id] != nil # regresa si la variable ya existe
      return true
    elsif species["father"] == nil  # si la clase no tiene padre
      return false
    else
      return idDeclaredInSpeciesRecursively(species["father"], id, type) # checa para su padre
    end
  end

  def isValidType(type)
    if type == "number" || type == "decimal" || type == "char" || type == "string" || type == "logic"
      return true
    else
      return $speciesBook[type] != nil # que no sea un hash vacio (valor por default)
    end
  end

  def newMethod(id)
    unless idDeclaredInSpeciesRecursively($speciesBook[$actualSpecies], id, "methods")
      unless isValidType($actualType) || $actualType == "oblivion"
        abort("Semantic error: species '#{$actualType}' is not defined. Error on line: #{$line_number}")
      end
      $speciesBook[$actualSpecies]["methods"][id] = Hash.new
      $speciesBook[$actualSpecies]["methods"][id]["type"] = $actualType
      $speciesBook[$actualSpecies]["methods"][id]["scope"] = $actualModifier
      $speciesBook[$actualSpecies]["methods"][id]["size"] = { "number" => 0, "decimal" => 0, "string" => 0, "char" => 0, "logic" => 0 }
      $speciesBook[$actualSpecies]["methods"][id]["variables"] = Hash.new
      $speciesBook[$actualSpecies]["methods"][id]["argumentList"] = []
      $speciesBook[$actualSpecies]["methods"][id]["begin"] = $quadrupleVector.count()
      $actualMethod = id
      resetCounters("local")
    else
      abort("Semantic error: variable '#{id}' is already defined. Error on line: #{$line_number}")
    end
  end

  def newArgument(type, id)
    if $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] == nil
      unless isValidType(type)
        abort("Semantic error: species '#{type}' is not defined. Error on line: #{$line_number}")
      end
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] = Hash.new
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["type"] = $actualType
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["modifiable"] = $isVariable
      if $actualType == "number" || $actualType == "decimal" || $actualType == "string" || $actualType == "char" || $actualType == "logic"
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["location"] = locationGenerator(1, "local", $actualType)
        $speciesBook[$actualSpecies]["methods"][$actualMethod]["size"][$actualType] += 1
      end
      arg = { "location" => $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["location"], "type" => type }
      $speciesBook[$actualSpecies]["methods"][$actualMethod]["argumentList"].push(arg)
    else
      abort("Semantic error: argument '#{id}' is already defined in method '#{$actualMethod}'. Error on line: #{$line_number}")
    end
  end

  def expressionResultType(operator, leftOp, rightOp)
    # puts "Cube call with leftOp: #{leftOp}, rightOp: #{rightOp} and operator: #{operator} on line: #{$line_number}"
    if $semanticCube[leftOp][rightOp][operator] == nil
      abort("Semantic error: type mismatch. Cannot combine type '#{leftOp}' and type '#{rightOp}' with operator '#{operator}'. Error on line: #{$line_number}")
    end
    return $semanticCube[leftOp][rightOp][operator]
  end

  def newConstant(type, value)
    if $constantBook[value] == nil
      $constantBook[value] = locationGenerator(1, "constant", type)
    end
    return $constantBook[value]
  end

  def locationGenerator(size, scope, type)
    if $theMagicNumber - $magicCounter[scope][type] >= size
      location = $magicReference[scope][type] * $theMagicNumber + $magicCounter[scope][type]
      $magicCounter[scope][type] += size
      return location
    else
      abort("Compilation error: out of memory for a #{type} variable with the #{scope} scope. While compiling line: #{$line_number}")
    end
  end

  def resetCounters(scope)
    $magicCounter[scope]["number"] = 0
    $magicCounter[scope]["decimal"] = 0
    $magicCounter[scope]["string"] = 0
    $magicCounter[scope]["char"] = 0
    $magicCounter[scope]["logic"] = 0
  end

  def createExpressionQuadruple(operator, leftOp, rightOp, tempType)
    temporal = locationGenerator(1, "temporal", tempType)
    quadruple = [operator, leftOp, rightOp, temporal]
    $quadrupleVector.push(quadruple)
    return temporal
  end

  def createAssignQuadruple(operator, leftOpHash, rightOpHash)
    # puts "Assign Q leftOp: #{leftOpHash}, rightOp: #{rightOpHash} and operator: #{operator} on line: #{$line_number}"
    leftOp = retrieveIdLocation(leftOpHash[0])
    leftOpType = retrieveIdType(leftOpHash[0])
    expressionResultType(operator, leftOpType, rightOpHash[0])
    quadruple = [operator, nil, rightOpHash[1], leftOp]
    $quadrupleVector.push(quadruple)
  end

  def createNotQuadruple(opHash)
    if opHash[0] == "logic"
      result = locationGenerator(1, "temporal", "logic")
      quadruple = ["!", nil, opHash[1], result]
      return result
    else
      abort("Semantic error: type mismatch. Cannot negate non-logic values ('#{opHash[0]}'). Error on line: #{$line_number}")
    end
  end

  def retrieveIdLocation(id)
    if $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] != nil
      return $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["location"]
    elsif idLocationRecursively($speciesBook[$actualSpecies], id) != nil
      return idLocationRecursively($speciesBook[$actualSpecies], id)
    else
      abort("Semantic error: variable '#{id}' not declared. Error on line: #{$line_number}")
    end
  end

  def retrieveIdType(id)
    if $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id] != nil
      return $speciesBook[$actualSpecies]["methods"][$actualMethod]["variables"][id]["type"]
    elsif idTypeRecursively($speciesBook[$actualSpecies], id) != nil
      return idTypeRecursively($speciesBook[$actualSpecies], id)
    else
      abort("Semantic error: variable '#{id}' not declared. Error on line: #{$line_number}")
    end
  end

  def generateLogicControlQuadruple(exp, goToType)
    unless exp[0] == "logic"
      abort("Semantic error: type mismatch. Control expression is not logic type. Error on line: #{$line_number}")
    end
    action = "gotoF"
    if goToType
      action = "gotoT"
    end
    quadruple = [action, exp[1], nil, nil]
    $quadrupleVector.push(quadruple)
    $jumpStack.push($quadrupleVector.count()-1)
  end

  def generateDoWhileQuadruple(exp)
    unless exp[0] == "logic"
      abort("Semantic error: type mismatch. Control expression is not logic type. Error on line: #{$line_number}")
    end
    retorno = $jumpStack.pop()
    quadruple = ["gotoV", exp[1], nil, retorno]
    $quadrupleVector.push(quadruple)
  end

  def endWhile()
    aux = $jumpStack.pop(2)
    quadruple = ["goto", nil, nil, aux[0]]
    $quadrupleVector.push(quadruple)
    fillQuadruple(aux[1])
  end

  def endIf()
    while $jumpStack.last() != "if" do
      fillQuadruple($jumpStack.pop())
    end
    $jumpStack.pop()
  end

  def generateElse()
    quadruple = ["goto", nil, nil, nil]
    $quadrupleVector.push(quadruple)
    fillQuadruple($jumpStack.pop())
    $jumpStack.push($quadrupleVector.count()-1)
  end

  def fillQuadruple(index)
    $quadrupleVector[index][3] = $quadrupleVector.count()
  end

  def endFunk(exp)
    type = $speciesBook[$actualSpecies]["methods"][$actualMethod]["type"]
    abort("Semantic error: type mismatch in reply expression. Error on line: #{$line_number}") if type != exp[0] && exp[0] != nil
    abort("Semantic error: oblivion funks cannot have reply. Error on line: #{$line_number}") if type == "oblivion" && exp[0] != nil
    if $actualMethod != "chief"
      $quadrupleVector.push(["return", nil, nil, exp[1]])
    else
      $quadrupleVector.push(["terminate", nil, nil, exp[1]])
    end
  end

  def validateFunk()
    if $argumentCount != 0
      $argumentCountStack.push($argumentCount)
    end
    $argumentCount = 0
    $funkGlobalContext = false
    if $actualIdSpecies == nil
      $actualIdSpecies = $actualSpecies
      $funkGlobalContext = true
    end
    funkHash = speciesHashOfFunkRecursively($speciesBook[$actualIdSpecies], $actualIdFunk)
    if funkHash != nil
      if funkHash["scope"] || $funkGlobalContext
        return funkHash["type"]
      else
        abort("Semantic error: method #{$actualIdFunk} is not open. Error on line: #{$line_number}")
      end
    else
      abort("Semantic error: method #{$actualIdFunk} not defined. Error on line: #{$line_number}")
    end
  end

  def generateArg(argument)
    funkHash = speciesHashOfFunkRecursively($speciesBook[$actualIdSpecies], $actualIdFunk)
    if $argumentCount >= funkHash["argumentList"].count()
      abort("Semantic error: wrong number of arguments for function #{$actualIdFunk}. Error on line: #{$line_number}")
    end
    expected = funkHash["argumentList"][$argumentCount]["type"]
    if expected == argument[0]
      quadruple = ["param", argument[1], [($argumentCount+1), funkHash["argumentList"].count], funkHash["argumentList"][$argumentCount]["location"]]
      $quadrupleVector.push(quadruple)
      $argumentCount += 1
    else
      abort("Semantic error: argument type mismatch in #{$actualIdFunk}, expected: '#{expected}' actual: '#{argument[0]}'. Error on line: #{$line_number}")
    end
  end

  def endFunkCall
    funkHash = speciesHashOfFunkRecursively($speciesBook[$actualIdSpecies], $actualIdFunk)
    if $argumentCount == funkHash["argumentList"].count()
      if $funkGlobalContext
        sendAttributesDirectly()
      else
        sendAttributes()
      end
      typeDir = funkHash["type"]
      if typeDir == "oblivion"
        typeDir = nil
      else
        typeDir = locationGenerator(1, "local", typeDir)
      end
      quadruple = ["gosub", funkHash["begin"], nil, typeDir]
      $quadrupleVector.push(quadruple)
      $actualIdSpecies = nil
      if $argumentCountStack.empty?
        $argumentCount = 0
      else
        $argumentCount = $argumentCountStack.pop
      end
      return typeDir
    else
      abort("Semantic error: wrong number of arguments for function #{$actualIdFunk}. Error on line: #{$line_number}")
    end
  end

  def createAtributtesRecursively(id, speciesHash)
    createAtributtesRecursively(id, speciesHash["father"]) if speciesHash["father"] != nil
    auxSpecies = $actualSpecies
    speciesHash["variables"].each do |key, h|
      $actualType = h["type"]
      $actualModifier = h["scope"]
      $isVariable = h["modifiable"]
      newVariable(id+"."+key)
    end
    $actualSpecies = auxSpecies
    $actualType = $speciesBook[$actualSpecies]["variables"][id]["type"]
    $actualModifier = $speciesBook[$actualSpecies]["variables"][id]["scope"]
    $isVariable = $speciesBook[$actualSpecies]["variables"][id]["modifiable"]
  end

  def validateAttribute(id)
    unless $speciesBook[$actualSpecies]["variables"][id]["scope"]
      attribute = id.split(".").last
      abort("Semantic error: attribute #{attribute} is not open. Error on line: #{$line_number}")
    end
  end

  def sendAttributes()
    $speciesBook[$actualSpecies]["variables"].each do |key, h|
      tokens = key.split(".")
      type = h["type"]
      isPrimitive = type == "number" || type == "decimal" || type == "char" || type == "string" || type == "logic"
      if tokens[0] == $actualId && tokens.count > 1 && isPrimitive
        destination = idLocationRecursively($speciesBook[$speciesBook[$actualSpecies]["variables"][tokens[0]]["type"]], key[key.index(".")+1..-1])
        quadruple = ["SEND_ATTR", destination, nil, h["location"]]
        $quadrupleVector.push(quadruple)
      end
    end
  end

  def sendAttributesDirectly()
    iterateClassVariablesRecursively($speciesBook[$actualSpecies])
  end

  def iterateClassVariablesRecursively(speciesHash)
    if speciesHash["father"] != nil
      iterateClassVariablesRecursively(speciesHash["father"])
    else
      speciesHash["variables"].each do |key, h|
        type = h["type"]
        isPrimitive = type == "number" || type == "decimal" || type == "char" || type == "string" || type == "logic"
        if isPrimitive
          quadruple = ["SEND_ATTR", h["location"], nil, h["location"]]
          $quadrupleVector.push(quadruple)
        end
      end
    end
  end

  def speciesHashOfFunkRecursively(species, id)
    if species["methods"][id] != nil # regresa si la variable ya existe
      return species["methods"][id]
    elsif species["father"] == nil  # si la clase no tiene padre
      return nil
    else
      return speciesHashOfFunkRecursively(species["father"], id) # checa para su padre
    end
  end

  def idLocationRecursively(species, id)
    if species["variables"][id] != nil # regresa si la variable ya existe
      return species["variables"][id]["location"]
    elsif species["father"] == nil  # si la clase no tiene padre
      return nil
    else
      return idLocationRecursively(species["father"], id) # checa para su padre
    end
  end

  def idTypeRecursively(species, id)
    if species["variables"][id] != nil # regresa si la variable ya existe
      return species["variables"][id]["type"]
    elsif species["father"] == nil  # si la clase no tiene padre
      return nil
    else
      return idLocationRecursively(species["father"], id) # checa para su padre
    end
  end

  def terminateCompilation()
    $constantBook.each do |key, value|
      $constantCounterBook[value] = key
    end
    File.open('constants.yaml', 'w') { |fo| fo.puts $constantCounterBook.to_yaml }
    File.open('quadruples.yaml', 'w') { |fo| fo.puts $quadrupleVector.to_yaml }
  end
...end objective_plox_bison.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    64,    78,    54,    64,    78,    81,    77,    79,    80,    82,
    84,    83,    85,    86,    87,   171,    78,    81,    77,    79,
    80,    64,    78,    81,    77,    79,    80,    60,    52,    78,
    60,   225,   136,   224,   130,   137,    67,    20,    21,    67,
    53,   172,    64,    78,    81,    77,    58,    59,    60,    58,
    59,    76,    65,    66,    76,    65,    66,    67,    20,    21,
    70,    71,    72,    70,    71,    72,    76,    58,    59,    60,
    64,   -76,    76,    65,    66,    78,    81,    77,    67,    76,
    60,    70,    71,    72,   -74,   225,   173,   224,    58,    59,
   140,    64,   175,    76,    65,    66,   176,    60,   -74,    58,
    59,   133,    70,    71,    72,   131,    67,    20,    21,    64,
    28,    29,    64,    20,    21,   168,    58,    59,    60,   168,
    76,   -76,    65,    66,   128,    76,   127,    67,    28,    29,
    70,    71,    72,    90,   124,   -76,    60,    58,    59,    60,
    64,   195,    76,    65,    66,    67,   118,   137,    67,    50,
    93,    70,    71,    72,    91,    58,    59,    47,    58,    59,
    73,    65,    66,    64,    65,    66,    56,    60,   141,    70,
    71,    72,    70,    71,    72,    50,    67,    47,   169,    26,
   212,    64,   213,   215,    64,   140,    58,    59,   137,   217,
    60,   137,    65,    66,   130,    26,    22,   146,    15,    67,
    70,    71,    72,    14,    13,    11,   168,   220,    60,    58,
    59,    60,    64,   221,   137,    65,    66,    67,     9,     8,
    67,     4,     5,    70,    71,    72,   137,    58,    59,   137,
    58,    59,     4,    65,    66,    64,    65,    66,   nil,    60,
   nil,    70,    71,    72,    70,    71,    72,   nil,    67,   nil,
   nil,   nil,   nil,    64,   nil,   nil,    64,   nil,    58,    59,
   nil,   nil,    60,   nil,    65,    66,   nil,   nil,   nil,   nil,
   nil,    67,    70,    71,    72,   nil,   nil,   nil,   nil,   nil,
    60,    58,    59,    60,    64,   nil,   nil,    65,    66,    67,
   nil,   nil,    67,   nil,   nil,    70,    71,    72,   nil,    58,
    59,   nil,    58,    59,   nil,    65,    66,    64,    65,    66,
   nil,    60,   nil,    70,    71,    72,    70,    71,    72,   nil,
    67,   nil,   nil,   nil,   nil,    64,   nil,   nil,    64,   nil,
    58,    59,   nil,   nil,    60,   nil,    65,    66,   nil,   nil,
   nil,   nil,   nil,    67,    70,    71,    72,   nil,   nil,   nil,
   nil,   nil,    60,    58,    59,    60,    64,   nil,   nil,    65,
    66,    67,   nil,   nil,    67,   nil,   nil,    70,    71,    72,
   nil,    58,    59,   nil,    58,    59,   nil,    65,    66,    64,
    65,    66,   nil,    60,   nil,    70,    71,    72,    70,    71,
    72,   nil,    67,   nil,   nil,   nil,   nil,    64,   nil,   nil,
    64,   nil,    58,    59,   nil,   nil,    60,   nil,    65,    66,
   nil,   nil,   nil,   nil,   nil,    67,    70,    71,    72,   nil,
   nil,   nil,   nil,   nil,    60,    58,    59,    60,    64,   nil,
   nil,    65,    66,    67,   nil,   nil,    67,   nil,   nil,    70,
    71,    72,   nil,    58,    59,   nil,    58,    59,   nil,    65,
    66,    64,    65,    66,   nil,    60,   nil,    70,    71,    72,
    70,    71,    72,   nil,    67,   nil,   nil,   nil,   nil,    64,
   nil,   nil,    64,   nil,    58,    59,   nil,   nil,    60,   nil,
    65,    66,   nil,   nil,   nil,   nil,   nil,    67,    70,    71,
    72,   nil,   nil,   nil,   nil,   nil,    60,    58,    59,    60,
    64,   nil,   nil,    65,    66,    67,   nil,   nil,    67,   nil,
   nil,    70,    71,    72,   nil,    58,    59,   nil,    58,    59,
   nil,    65,    66,    64,    65,    66,   nil,    60,   nil,    70,
    71,    72,    70,    71,    72,   nil,    67,   nil,   nil,   nil,
   nil,    64,   nil,   nil,    64,   nil,    58,    59,   nil,   nil,
    60,   nil,    65,    66,   nil,   nil,   nil,   nil,   nil,    67,
    70,    71,    72,   nil,   nil,   nil,   nil,   nil,    60,    58,
    59,    60,    64,   nil,   nil,    65,    66,    67,   nil,   nil,
    67,   nil,   nil,    70,    71,    72,   nil,    58,    59,   nil,
    58,    59,   nil,    65,    66,    64,    65,    66,   nil,    60,
   nil,    70,    71,    72,    70,    71,    72,   nil,    67,   nil,
   nil,   nil,   nil,    64,   nil,   nil,    64,   nil,    58,    59,
   nil,   nil,    60,   nil,    65,    66,   nil,   nil,   nil,   nil,
   nil,    67,    70,    71,    72,   nil,   nil,   nil,   nil,   nil,
    60,    58,    59,    60,   nil,   nil,   nil,    65,    66,    67,
   nil,   nil,    67,   nil,   nil,    70,    71,    72,   nil,    58,
    59,   nil,    58,    59,   nil,    65,    66,   nil,    65,    66,
   nil,   nil,   nil,    70,    71,    72,    70,    71,    72,    78,
    81,    77,    79,    80,    82,    84,    83,    85,    86,    87,
    78,    81,    77,    79,    80,    82,    84,    83,    85,    86,
    87,    88,    89,    78,    81,    77,    79,    80,    82,    84,
    83,    85,    86,    87,    88,    89,   nil,    41,   nil,   nil,
   nil,   nil,   nil,   nil,   129,   nil,   nil,   nil,   nil,    76,
    37,    38,    39,    40,    42,    43,   nil,    75,   nil,   nil,
    76,   nil,   nil,    78,    81,    77,    79,    80,    78,    81,
    77,    79,    80,    76,    78,    81,    77,    79,    80,    82,
    84,    83,    85,    86,    87,    88,    89,    78,    81,    77,
    79,    80,    82,    84,    83,    85,    86,    87,    88,    89,
    78,    81,    77,    79,    80,    82,    84,    83,    85,    86,
    87,    88,    89,    76,    41,   nil,   nil,   nil,    76,   nil,
   nil,   210,   nil,   nil,    76,   nil,   nil,    37,    38,    39,
    40,    42,    43,   nil,   nil,   nil,   211,    76,   nil,   nil,
    78,    81,    77,    79,    80,    78,    81,    77,    79,    80,
    76,    78,    81,    77,    79,    80,    82,    84,    83,    85,
    86,    87,    88,    89,    78,    81,    77,    79,    80,    82,
    84,    83,    85,    86,    87,    88,    89,    78,    81,    77,
    79,    80,    82,    84,    83,    85,    86,    87,    88,    89,
    76,    41,   nil,   nil,   147,    76,   nil,   nil,   nil,   nil,
   nil,    76,   nil,   nil,    37,    38,    39,    40,    42,    43,
   nil,   nil,   nil,   nil,    76,   151,   152,   157,   nil,   nil,
   nil,   160,   nil,   161,   nil,   162,   163,    76,    78,    81,
    77,    79,    80,    82,    84,    83,    85,    86,    87,    88,
    89,    78,    81,    77,    79,    80,    82,    84,    83,    85,
    86,    87,    88,    89,    78,    81,    77,    79,    80,    82,
    84,    83,    85,    86,    87,    88,    89,   147,    41,   181,
   182,   183,   184,   185,   186,   187,   188,   nil,    76,   nil,
   nil,    37,    38,    39,    40,    42,    43,   nil,   151,   152,
   157,    76,   nil,   nil,   160,   nil,   161,   nil,   162,   163,
   nil,   nil,   nil,   nil,    76,    78,    81,    77,    79,    80,
    82,    84,    83,    85,    86,    87,    88,    89,    78,    81,
    77,    79,    80,    82,    84,    83,    85,    86,    87,    88,
    89,   nil,    78,    81,    77,    79,    80,    82,    84,    83,
    85,    86,    87,    88,    89,    41,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    76,   137,   nil,    37,    38,
    39,    40,    42,    43,   nil,   nil,   nil,   nil,    76,    78,
    81,    77,    79,    80,    82,    84,    83,    85,    86,    87,
    88,    89,    76,    78,    81,    77,    79,    80,    82,    84,
    83,    85,    86,    87,    88,    89,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   194,   123,    78,    81,    77,    79,
    80,    82,    84,    83,    85,    86,    87,    88,    89,    76,
    78,    81,    77,    79,    80,    82,    84,    83,    85,    86,
    87,    88,    89,    76,    78,    81,    77,    79,    80,    82,
    84,    83,    85,    86,    87,    88,    89,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    76,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    76,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    76 ]

racc_action_check = [
    78,   102,    45,   228,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   150,   112,   112,   112,   112,
   112,   168,   111,   111,   111,   111,   111,    78,    44,   106,
   228,   216,   124,   216,   118,   124,    78,   145,   145,   228,
    44,   151,   217,   104,   104,   104,    78,    78,   168,   228,
   228,   102,    78,    78,   113,   228,   228,   168,    14,    14,
    78,    78,    78,   228,   228,   228,   112,   168,   168,   217,
   133,   118,   111,   168,   168,   105,   105,   105,   217,   106,
   173,   168,   168,   168,   147,   232,   152,   232,   217,   217,
   128,   172,   158,   104,   217,   217,   159,   133,    60,   173,
   173,   122,   217,   217,   217,   119,   133,    18,    18,    92,
    19,    19,    77,   137,   137,   167,   133,   133,   172,   147,
   103,   147,   133,   133,    99,   105,    98,   172,    25,    25,
   133,   133,   133,    60,    96,    60,    92,   172,   172,    77,
    90,   176,    94,   172,   172,    92,    91,   179,    77,    75,
    63,   172,   172,   172,    61,    92,    92,    56,    77,    77,
    51,    92,    92,    89,    77,    77,    46,    90,   130,    92,
    92,    92,    77,    77,    77,    36,    90,    35,   148,    24,
   193,    88,   196,   197,    87,   146,    90,    90,   199,   200,
    89,   201,    90,    90,   141,    17,    16,   140,    13,    89,
    90,    90,    90,    12,    10,     8,   210,   211,    88,    89,
    89,    87,    86,   212,   215,    89,    89,    88,     5,     4,
    87,     3,     1,    89,    89,    89,   229,    88,    88,   230,
    87,    87,     0,    88,    88,    85,    87,    87,   nil,    86,
   nil,    88,    88,    88,    87,    87,    87,   nil,    86,   nil,
   nil,   nil,   nil,    84,   nil,   nil,    83,   nil,    86,    86,
   nil,   nil,    85,   nil,    86,    86,   nil,   nil,   nil,   nil,
   nil,    85,    86,    86,    86,   nil,   nil,   nil,   nil,   nil,
    84,    85,    85,    83,   157,   nil,   nil,    85,    85,    84,
   nil,   nil,    83,   nil,   nil,    85,    85,    85,   nil,    84,
    84,   nil,    83,    83,   nil,    84,    84,   160,    83,    83,
   nil,   157,   nil,    84,    84,    84,    83,    83,    83,   nil,
   157,   nil,   nil,   nil,   nil,   188,   nil,   nil,   187,   nil,
   157,   157,   nil,   nil,   160,   nil,   157,   157,   nil,   nil,
   nil,   nil,   nil,   160,   157,   157,   157,   nil,   nil,   nil,
   nil,   nil,   188,   160,   160,   187,    82,   nil,   nil,   160,
   160,   188,   nil,   nil,   187,   nil,   nil,   160,   160,   160,
   nil,   188,   188,   nil,   187,   187,   nil,   188,   188,   186,
   187,   187,   nil,    82,   nil,   188,   188,   188,   187,   187,
   187,   nil,    82,   nil,   nil,   nil,   nil,   185,   nil,   nil,
    50,   nil,    82,    82,   nil,   nil,   186,   nil,    82,    82,
   nil,   nil,   nil,   nil,   nil,   186,    82,    82,    82,   nil,
   nil,   nil,   nil,   nil,   185,   186,   186,    50,   184,   nil,
   nil,   186,   186,   185,   nil,   nil,    50,   nil,   nil,   186,
   186,   186,   nil,   185,   185,   nil,    50,    50,   nil,   185,
   185,   183,    50,    50,   nil,   184,   nil,   185,   185,   185,
    50,    50,    50,   nil,   184,   nil,   nil,   nil,   nil,    81,
   nil,   nil,    80,   nil,   184,   184,   nil,   nil,   183,   nil,
   184,   184,   nil,   nil,   nil,   nil,   nil,   183,   184,   184,
   184,   nil,   nil,   nil,   nil,   nil,    81,   183,   183,    80,
   182,   nil,   nil,   183,   183,    81,   nil,   nil,    80,   nil,
   nil,   183,   183,   183,   nil,    81,    81,   nil,    80,    80,
   nil,    81,    81,   181,    80,    80,   nil,   182,   nil,    81,
    81,    81,    80,    80,    80,   nil,   182,   nil,   nil,   nil,
   nil,    64,   nil,   nil,    67,   nil,   182,   182,   nil,   nil,
   181,   nil,   182,   182,   nil,   nil,   nil,   nil,   nil,   181,
   182,   182,   182,   nil,   nil,   nil,   nil,   nil,    64,   181,
   181,    67,    79,   nil,   nil,   181,   181,    64,   nil,   nil,
    67,   nil,   nil,   181,   181,   181,   nil,    64,    64,   nil,
    67,    67,   nil,    64,    64,   180,    67,    67,   nil,    79,
   nil,    64,    64,    64,    67,    67,    67,   nil,    79,   nil,
   nil,   nil,   nil,    76,   nil,   nil,   178,   nil,    79,    79,
   nil,   nil,   180,   nil,    79,    79,   nil,   nil,   nil,   nil,
   nil,   180,    79,    79,    79,   nil,   nil,   nil,   nil,   nil,
    76,   180,   180,   178,   nil,   nil,   nil,   180,   180,    76,
   nil,   nil,   178,   nil,   nil,   180,   180,   180,   nil,    76,
    76,   nil,   178,   178,   nil,    76,    76,   nil,   178,   178,
   nil,   nil,   nil,    76,    76,    76,   178,   178,   178,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,    57,    57,    57,    57,    57,    57,    57,
    57,    57,    57,    57,    57,    57,   nil,   127,   nil,   nil,
   nil,   nil,   nil,   nil,   115,   nil,   nil,   nil,   nil,   114,
   127,   127,   127,   127,   127,   127,   nil,    57,   nil,   nil,
   115,   nil,   nil,   110,   110,   110,   110,   110,   107,   107,
   107,   107,   107,    57,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   110,    73,   nil,   nil,   nil,   107,   nil,
   nil,   191,   nil,   nil,   121,   nil,   nil,    73,    73,    73,
    73,    73,    73,   nil,   nil,   nil,   192,   191,   nil,   nil,
   108,   108,   108,   108,   108,   109,   109,   109,   109,   109,
   192,   198,   198,   198,   198,   198,   198,   198,   198,   198,
   198,   198,   198,   198,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   108,    33,   nil,   nil,   149,   109,   nil,   nil,   nil,   nil,
   nil,   198,   nil,   nil,    33,    33,    33,    33,    33,    33,
   nil,   nil,   nil,   nil,   202,   149,   149,   149,   nil,   nil,
   nil,   149,   nil,   149,   nil,   149,   149,   203,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   206,   206,   206,   206,   206,   206,
   206,   206,   206,   206,   206,   206,   206,   144,    97,   166,
   166,   166,   166,   166,   166,   166,   166,   nil,   204,   nil,
   nil,    97,    97,    97,    97,    97,    97,   nil,   144,   144,
   144,   205,   nil,   nil,   144,   nil,   144,   nil,   144,   144,
   nil,   nil,   nil,   nil,   206,   207,   207,   207,   207,   207,
   207,   207,   207,   207,   207,   207,   207,   207,   208,   208,
   208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   nil,   177,   177,   177,   177,   177,   177,   177,   177,
   177,   177,   177,   177,   177,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   207,   177,   nil,    30,    30,
    30,    30,    30,    30,   nil,   nil,   nil,   nil,   208,    95,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    95,    95,   177,   174,   174,   174,   174,   174,   174,   174,
   174,   174,   174,   174,   174,   174,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   174,    95,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,    95,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   174,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   209,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   101,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   226 ]

racc_action_pointer = [
   206,   222,   nil,   195,   192,   218,   nil,   nil,   175,   nil,
   173,   nil,   175,   168,    24,   nil,   167,   154,    73,    78,
   nil,   nil,   nil,   nil,   138,    96,   nil,   nil,   nil,   nil,
   995,   nil,   nil,   841,   nil,   147,   138,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    -2,   -23,   130,   nil,   nil,   nil,
   397,   121,   nil,   nil,   nil,   nil,   127,   699,   nil,   nil,
    96,   152,   nil,   111,   538,   nil,   nil,   541,   nil,   nil,
   nil,   nil,   nil,   764,   nil,   112,   610,   109,    -3,   569,
   469,   466,   353,   253,   250,   232,   209,   181,   178,   160,
   137,   116,   106,   nil,    88,  1045,    94,   918,    90,    94,
   nil,  1096,    -3,    66,    39,    71,    25,   744,   816,   821,
   739,    18,    12,     0,   675,   686,   nil,   nil,    32,    65,
   nil,   750,    65,   nil,     7,   nil,   nil,   687,    53,   nil,
   138,   nil,   nil,    67,   nil,   nil,   nil,    79,   nil,   nil,
   159,   192,   nil,   nil,   917,     3,   148,    82,   149,   844,
   -10,     2,    47,   nil,   nil,   nil,   nil,   281,    67,    94,
   304,   nil,   nil,   nil,   nil,   nil,   932,    78,    18,   nil,
   nil,   nil,    88,    50,  1059,   nil,   111,  1008,   613,   119,
   592,   520,   497,   448,   425,   394,   376,   325,   322,   nil,
   nil,   763,   776,   140,   nil,   nil,   157,   125,   827,   160,
   127,   163,   840,   853,   904,   917,   930,   981,   994,  1082,
   169,   182,   188,   nil,   nil,   186,   -27,    39,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1110,   nil,     0,   198,
   201,   nil,    27,   nil ]

racc_action_default = [
    -2,  -136,    -1,    -2,  -136,  -136,    -3,    -4,  -136,   234,
    -7,    -6,  -136,  -136,   -10,    -8,  -136,   -12,   -10,   -17,
   -19,   -20,    -5,    -9,   -12,   -44,   -43,   -11,   -14,   -15,
  -136,   -18,   -13,  -136,   -45,  -136,   -26,   -52,   -53,   -54,
   -55,   -56,   -57,   -58,  -136,  -136,   -23,   -22,   -25,   -27,
  -136,  -136,   -46,   -47,   -16,   -21,  -136,  -136,   -67,   -68,
   -69,  -136,   -73,  -136,  -136,  -110,  -111,  -136,  -113,  -114,
  -133,  -134,  -135,   -48,   -24,   -26,  -136,  -136,  -136,  -136,
  -136,  -136,  -136,  -136,  -136,  -136,  -136,  -136,  -136,  -136,
  -136,  -136,   -80,   -77,  -107,  -136,  -136,   -48,   -60,  -136,
   -28,   -95,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,
  -104,  -105,  -106,  -108,  -109,  -136,   -71,   -72,   -78,  -136,
   -81,  -116,  -117,  -112,  -136,   -49,   -59,  -136,   -83,   -70,
  -136,   -75,  -115,  -136,   -42,   -50,   -51,   -63,   -61,   -82,
  -136,   -78,   -79,  -118,   -65,   -63,   -83,   -37,  -136,   -65,
  -136,  -136,  -136,   -88,   -89,   -90,   -91,  -136,  -136,  -136,
  -136,  -130,  -129,  -129,   -64,   -84,  -136,   -40,  -136,   -62,
   -66,   -85,  -136,  -136,  -136,   -93,  -136,  -136,  -136,  -136,
  -136,  -136,  -136,  -136,  -136,  -136,  -136,  -136,  -136,   -38,
   -41,  -136,  -136,  -136,   -92,   -76,  -136,  -120,  -131,  -136,
  -136,  -136,   -29,   -30,   -31,   -32,   -33,   -34,   -35,   -36,
   -40,  -136,  -136,   -94,  -119,  -136,  -123,  -136,  -128,   -39,
   -86,   -87,  -121,  -122,  -132,  -132,  -127,  -126,  -136,  -136,
  -136,  -125,  -123,  -124 ]

racc_goto_table = [
    57,   116,   199,   135,   201,   189,   120,   117,   223,    23,
    48,   134,    31,   144,    94,   145,    32,    95,    34,    96,
    45,   164,    35,   145,   233,    44,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,    74,   121,   125,   139,   148,   142,   143,   219,   100,
   170,   138,   230,    17,   158,   159,   197,    27,   200,   158,
   159,     2,   165,   126,     6,   179,   180,   228,   229,    51,
    33,   193,   167,   166,    55,    92,   119,    30,   216,    16,
   218,   132,   214,   121,   178,    12,   196,    10,     7,     1,
   227,   nil,   nil,   nil,   222,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   174,   231,   232,
   177,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   191,   nil,
   nil,   nil,   192,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   202,   203,   204,   205,   206,   207,   208,   209,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   226 ]

racc_goto_check = [
    22,    41,    57,    33,    57,    26,    46,    42,    58,     9,
    20,    31,    12,    36,    22,    10,     9,    22,    12,    30,
    16,    36,    15,    10,    58,    15,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    16,    22,    30,    47,    37,    42,    46,    26,    20,
    37,    32,    57,     8,    41,    40,    33,     8,    33,    41,
    40,     2,    47,    35,     2,    60,    60,    59,    59,    29,
    28,    39,    25,    24,    18,    44,    45,    14,    33,     7,
    33,    54,    55,    22,    56,     6,    41,     5,     4,     1,
    61,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,    33,    33,
    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    22,    22,    22,    22,    22,    22,    22,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22 ]

racc_goto_pointer = [
   nil,    89,    61,   nil,    84,    79,    75,    65,    39,    -8,
  -122,   nil,    -7,   nil,    58,    -8,   -15,   nil,    28,   nil,
   -26,   nil,   -50,   nil,   -74,   -75,  -162,   nil,    45,    25,
   -54,  -113,   -76,  -121,   nil,   -35,  -124,   -99,   nil,  -102,
   -89,   -90,   -84,   nil,    12,   -16,   -86,   -84,   nil,   nil,
   nil,   nil,   nil,   nil,   -41,  -115,   -77,  -176,  -208,  -157,
   -97,  -127 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
    18,    24,   nil,    19,   nil,    99,   nil,    46,   nil,    36,
   nil,    49,   198,   150,   nil,   190,   nil,    25,   nil,   nil,
   nil,   nil,    97,   nil,    98,   nil,   nil,   nil,   149,    69,
    61,    62,   nil,    63,   nil,   nil,   nil,   nil,   153,   154,
   155,   156,    68,   122,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 67, :_reduce_1,
  0, 68, :_reduce_2,
  2, 68, :_reduce_3,
  2, 69, :_reduce_4,
  6, 70, :_reduce_5,
  1, 71, :_reduce_6,
  0, 72, :_reduce_7,
  2, 72, :_reduce_8,
  2, 73, :_reduce_9,
  0, 74, :_reduce_10,
  2, 74, :_reduce_11,
  0, 75, :_reduce_12,
  2, 75, :_reduce_13,
  1, 78, :_reduce_14,
  1, 78, :_reduce_15,
  5, 76, :_reduce_16,
  0, 80, :_reduce_17,
  1, 80, :_reduce_18,
  1, 79, :_reduce_19,
  1, 79, :_reduce_20,
  2, 82, :_reduce_21,
  1, 83, :_reduce_22,
  0, 84, :_reduce_23,
  2, 84, :_reduce_24,
  2, 81, :_reduce_25,
  0, 86, :_reduce_26,
  1, 86, :_reduce_27,
  4, 87, :_reduce_28,
  4, 89, :_reduce_29,
  4, 89, :_reduce_30,
  4, 89, :_reduce_31,
  4, 89, :_reduce_32,
  4, 89, :_reduce_33,
  4, 89, :_reduce_34,
  4, 89, :_reduce_35,
  4, 89, :_reduce_36,
  0, 90, :_reduce_37,
  2, 90, :_reduce_38,
  4, 91, :_reduce_39,
  0, 92, :_reduce_40,
  1, 92, :_reduce_41,
  8, 77, :_reduce_42,
  1, 93, :_reduce_43,
  0, 94, :_reduce_44,
  1, 94, :_reduce_45,
  1, 95, :_reduce_46,
  1, 95, :_reduce_47,
  0, 96, :_reduce_48,
  2, 96, :_reduce_49,
  1, 97, :_reduce_50,
  1, 97, :_reduce_51,
  1, 85, :_reduce_52,
  1, 85, :_reduce_53,
  1, 85, :_reduce_54,
  1, 85, :_reduce_55,
  1, 85, :_reduce_56,
  1, 85, :_reduce_57,
  1, 85, :_reduce_58,
  2, 98, :_reduce_59,
  0, 101, :_reduce_60,
  2, 101, :_reduce_61,
  4, 99, :_reduce_62,
  0, 102, :_reduce_63,
  2, 102, :_reduce_64,
  0, 103, :_reduce_65,
  2, 103, :_reduce_66,
  1, 105, :_reduce_67,
  1, 105, :_reduce_68,
  1, 105, :_reduce_69,
  4, 105, :_reduce_70,
  3, 105, :_reduce_71,
  3, 105, :_reduce_72,
  1, 105, :_reduce_73,
  1, 106, :_reduce_74,
  4, 107, :_reduce_75,
  1, 109, :_reduce_76,
  1, 110, :_reduce_77,
  1, 108, :_reduce_78,
  3, 108, :_reduce_79,
  0, 111, :_reduce_80,
  1, 111, :_reduce_81,
  3, 100, :_reduce_82,
  0, 113, :_reduce_83,
  3, 113, :_reduce_84,
  2, 104, :_reduce_85,
  5, 104, :_reduce_86,
  5, 104, :_reduce_87,
  1, 104, :_reduce_88,
  1, 104, :_reduce_89,
  1, 104, :_reduce_90,
  1, 104, :_reduce_91,
  3, 104, :_reduce_92,
  2, 104, :_reduce_93,
  4, 104, :_reduce_94,
  3, 88, :_reduce_95,
  3, 88, :_reduce_96,
  3, 88, :_reduce_97,
  3, 88, :_reduce_98,
  3, 88, :_reduce_99,
  3, 88, :_reduce_100,
  3, 88, :_reduce_101,
  3, 88, :_reduce_102,
  3, 88, :_reduce_103,
  3, 88, :_reduce_104,
  3, 88, :_reduce_105,
  3, 88, :_reduce_106,
  2, 88, :_reduce_107,
  3, 88, :_reduce_108,
  3, 88, :_reduce_109,
  1, 88, :_reduce_110,
  1, 88, :_reduce_111,
  3, 88, :_reduce_112,
  1, 88, :_reduce_113,
  1, 88, :_reduce_114,
  2, 112, :_reduce_115,
  1, 119, :_reduce_116,
  0, 120, :_reduce_117,
  2, 120, :_reduce_118,
  4, 114, :_reduce_119,
  0, 121, :_reduce_120,
  2, 121, :_reduce_121,
  5, 115, :_reduce_122,
  0, 124, :_reduce_123,
  5, 124, :_reduce_124,
  3, 124, :_reduce_125,
  5, 116, :_reduce_126,
  1, 127, :_reduce_127,
  4, 117, :_reduce_128,
  0, 126, :_reduce_129,
  0, 122, :_reduce_130,
  1, 123, :_reduce_131,
  0, 125, :_reduce_132,
  1, 118, :_reduce_133,
  1, 118, :_reduce_134,
  1, 118, :_reduce_135 ]

racc_reduce_n = 136

racc_shift_n = 234

racc_token_table = {
  false => 0,
  :error => 1,
  :POINT => 2,
  :NOT => 3,
  :MOD => 4,
  :MULT => 5,
  :DIV => 6,
  :PLUS => 7,
  :MINUS => 8,
  :MTHAN => 9,
  :MEQUAL => 10,
  :LTHAN => 11,
  :LEQUAL => 12,
  :EQUALITY => 13,
  :DIFFERENT => 14,
  :AND => 15,
  :OR => 16,
  :EQUAL => 17,
  :PLUSASSIGN => 18,
  :MINUSASSIGN => 19,
  :MULTASSIGN => 20,
  :DIVASSIGN => 21,
  :ORASSIGN => 22,
  :ANDASSIGN => 23,
  :MODASSIGN => 24,
  :SEMIC => 25,
  :HABEMVS => 26,
  :SPECIES => 27,
  :BLEFT => 28,
  :BRIGHT => 29,
  :ID => 30,
  :HEIROF => 31,
  :OPEN => 32,
  :HIDDEN => 33,
  :VAR => 34,
  :ETERNAL => 35,
  :COMA => 36,
  :SBLEFT => 37,
  :SBRIGHT => 38,
  :PLEFT => 39,
  :PRIGHT => 40,
  :FUNK => 41,
  :CHIEF => 42,
  :LOGIC => 43,
  :CHAR => 44,
  :NUMBER => 45,
  :DECIMAL => 46,
  :OBLIVION => 47,
  :STRING => 48,
  :NULL => 49,
  :ITSELF => 50,
  :SAY => 51,
  :HEAR => 52,
  :REPLY => 53,
  :SUM => 54,
  :TRUE => 55,
  :FALSE => 56,
  :UNLESS => 57,
  :ELSE => 58,
  :IF => 59,
  :ELSIF => 60,
  :DO => 61,
  :WHILE => 62,
  :CTED => 63,
  :CTEN => 64,
  :CTESTRING => 65 }

racc_nt_base = 66

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "POINT",
  "NOT",
  "MOD",
  "MULT",
  "DIV",
  "PLUS",
  "MINUS",
  "MTHAN",
  "MEQUAL",
  "LTHAN",
  "LEQUAL",
  "EQUALITY",
  "DIFFERENT",
  "AND",
  "OR",
  "EQUAL",
  "PLUSASSIGN",
  "MINUSASSIGN",
  "MULTASSIGN",
  "DIVASSIGN",
  "ORASSIGN",
  "ANDASSIGN",
  "MODASSIGN",
  "SEMIC",
  "HABEMVS",
  "SPECIES",
  "BLEFT",
  "BRIGHT",
  "ID",
  "HEIROF",
  "OPEN",
  "HIDDEN",
  "VAR",
  "ETERNAL",
  "COMA",
  "SBLEFT",
  "SBRIGHT",
  "PLEFT",
  "PRIGHT",
  "FUNK",
  "CHIEF",
  "LOGIC",
  "CHAR",
  "NUMBER",
  "DECIMAL",
  "OBLIVION",
  "STRING",
  "NULL",
  "ITSELF",
  "SAY",
  "HEAR",
  "REPLY",
  "SUM",
  "TRUE",
  "FALSE",
  "UNLESS",
  "ELSE",
  "IF",
  "ELSIF",
  "DO",
  "WHILE",
  "CTED",
  "CTEN",
  "CTESTRING",
  "$start",
  "supreme_plox",
  "plox_generation",
  "type_declaration",
  "class_declaration",
  "code_new_class",
  "code_heirof",
  "class_body",
  "class_variable_block",
  "class_function_block",
  "variable_declaration",
  "method_declaration",
  "modifier",
  "variable_is_modifiable",
  "variable_scope",
  "type",
  "some_variables",
  "code_new_variable",
  "next_variable",
  "type_specifier",
  "type1",
  "type2",
  "expression",
  "variable_assignment",
  "variable_assignment1",
  "variable_assignment4",
  "variable_assignment5",
  "new_function_code",
  "method_declaration1",
  "method_declaration2",
  "method_declaration3",
  "method_declaration4",
  "parameter_list",
  "statement_block",
  "parameter",
  "parameter_list1",
  "statement_block1",
  "statement_block2",
  "statement",
  "reference_expression",
  "non_final_id",
  "function_call",
  "reference_expression5",
  "funk_id",
  "start_funk",
  "reference_expression6",
  "arglist",
  "parameter1",
  "unless_statement",
  "if_statement",
  "do_statement",
  "while_statement",
  "literal_expression",
  "generate_arg",
  "arglist1",
  "unless_statement1",
  "push_if_floor",
  "validateLogicexp",
  "if_statement1",
  "generateElseCode",
  "push_cont_jump",
  "validateDoWhileExp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'objective_plox_bison.y', 14)
  def _reduce_1(val, _values, result)
     puts "OP! Programa compilado exitosamente."; terminateCompilation() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 17)
  def _reduce_2(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 18)
  def _reduce_3(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 21)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 24)
  def _reduce_5(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 27)
  def _reduce_6(val, _values, result)
     newSpecies(val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 30)
  def _reduce_7(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 31)
  def _reduce_8(val, _values, result)
     heirSpecies(val[1][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 34)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 37)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 38)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 41)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 42)
  def _reduce_13(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 45)
  def _reduce_14(val, _values, result)
     $actualModifier = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 46)
  def _reduce_15(val, _values, result)
     $actualModifier = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 49)
  def _reduce_16(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 52)
  def _reduce_17(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 53)
  def _reduce_18(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 56)
  def _reduce_19(val, _values, result)
     $actualModifier = false; $isVariable = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 57)
  def _reduce_20(val, _values, result)
     $actualModifier = false; $isVariable = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 60)
  def _reduce_21(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 63)
  def _reduce_22(val, _values, result)
     newVariable(val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 66)
  def _reduce_23(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 67)
  def _reduce_24(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 70)
  def _reduce_25(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 73)
  def _reduce_26(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 74)
  def _reduce_27(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 77)
  def _reduce_28(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 80)
  def _reduce_29(val, _values, result)
     createAssignQuadruple(val[2][0], val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 81)
  def _reduce_30(val, _values, result)
     createAssignQuadruple(val[2][0], val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 82)
  def _reduce_31(val, _values, result)
     createAssignQuadruple(val[2][0], val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 83)
  def _reduce_32(val, _values, result)
     createAssignQuadruple(val[2][0], val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 84)
  def _reduce_33(val, _values, result)
     createAssignQuadruple(val[2][0], val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 85)
  def _reduce_34(val, _values, result)
     createAssignQuadruple(val[2][0], val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 86)
  def _reduce_35(val, _values, result)
     createAssignQuadruple(val[2][0], val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 87)
  def _reduce_36(val, _values, result)
     createAssignQuadruple(val[2][0], val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 91)
  def _reduce_37(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 92)
  def _reduce_38(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 96)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 99)
  def _reduce_40(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 100)
  def _reduce_41(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 103)
  def _reduce_42(val, _values, result)
     endFunk([nil, nil]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 106)
  def _reduce_43(val, _values, result)
     $actualModifier = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 109)
  def _reduce_44(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 110)
  def _reduce_45(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 113)
  def _reduce_46(val, _values, result)
     newMethod(val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 114)
  def _reduce_47(val, _values, result)
     newMethod("chief"); fillQuadruple(0) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 117)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 118)
  def _reduce_49(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 121)
  def _reduce_50(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 122)
  def _reduce_51(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 126)
  def _reduce_52(val, _values, result)
     $actualType = "logic" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 127)
  def _reduce_53(val, _values, result)
     $actualType = "char" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 128)
  def _reduce_54(val, _values, result)
     $actualType = "number" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 129)
  def _reduce_55(val, _values, result)
     $actualType = "decimal" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 130)
  def _reduce_56(val, _values, result)
     $actualType = val[0][0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 131)
  def _reduce_57(val, _values, result)
     $actualType = "oblivion" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 132)
  def _reduce_58(val, _values, result)
     $actualType = "string" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 135)
  def _reduce_59(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 138)
  def _reduce_60(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 139)
  def _reduce_61(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 142)
  def _reduce_62(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 145)
  def _reduce_63(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 146)
  def _reduce_64(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 149)
  def _reduce_65(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 150)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 153)
  def _reduce_67(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 154)
  def _reduce_68(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 155)
  def _reduce_69(val, _values, result)
     val[0][1] = retrieveIdLocation(val[0][0]); val[0][0] = retrieveIdType(val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 156)
  def _reduce_70(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 157)
  def _reduce_71(val, _values, result)
     val[0][0] = val[2][0]; val[0][1] = val[2][1]; $actualIdSpecies = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 158)
  def _reduce_72(val, _values, result)
     val[0][0] = val[0][0] + "." + val[2][0]; validateAttribute(val[0][0]); val[0][1] = retrieveIdLocation(val[0][0]); val[0][0] = retrieveIdType(val[0][0]); $actualIdSpecies = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 159)
  def _reduce_73(val, _values, result)
     $actualIdSpecies = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 162)
  def _reduce_74(val, _values, result)
     $actualIdSpecies = retrieveIdType(val[0][0]); $actualId = val[0][0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 165)
  def _reduce_75(val, _values, result)
     val[0][0] = val[1][0]; val[0][1] = endFunkCall() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 168)
  def _reduce_76(val, _values, result)
     $actualIdFunk = val[0][0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 171)
  def _reduce_77(val, _values, result)
     val[0][0] = validateFunk() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 174)
  def _reduce_78(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 175)
  def _reduce_79(val, _values, result)
     val[0][0] = val[0][0] + "." + val[2][0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 178)
  def _reduce_80(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 179)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 182)
  def _reduce_82(val, _values, result)
     newArgument(val[0][0], val[1][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 185)
  def _reduce_83(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 186)
  def _reduce_84(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 189)
  def _reduce_85(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 190)
  def _reduce_86(val, _values, result)
    $quadrupleVector.push(["say", val[2][1], nil, nil])
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 191)
  def _reduce_87(val, _values, result)
    $quadrupleVector.push(["hear", val[2][0], nil, val[2][1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 192)
  def _reduce_88(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 193)
  def _reduce_89(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 194)
  def _reduce_90(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 195)
  def _reduce_91(val, _values, result)
     endWhile() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 196)
  def _reduce_92(val, _values, result)
     endFunk(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 197)
  def _reduce_93(val, _values, result)
     $actualIdSpecies = nil; 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 198)
  def _reduce_94(val, _values, result)
     val[0][0] = val[2][0]; val[0][1] = val[2][1]; $actualIdSpecies = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 202)
  def _reduce_95(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 203)
  def _reduce_96(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 204)
  def _reduce_97(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 205)
  def _reduce_98(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 206)
  def _reduce_99(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 207)
  def _reduce_100(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 208)
  def _reduce_101(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 209)
  def _reduce_102(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 210)
  def _reduce_103(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 211)
  def _reduce_104(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 212)
  def _reduce_105(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 213)
  def _reduce_106(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 214)
  def _reduce_107(val, _values, result)
     val[0][1] = createNotQuadruple(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 215)
  def _reduce_108(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 216)
  def _reduce_109(val, _values, result)
     val[0][0] = expressionResultType(val[1][0], val[0][0], val[2][0]); val[0][1] = createExpressionQuadruple(val[1][0], val[0][1], val[2][1], val[0][0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 217)
  def _reduce_110(val, _values, result)
     val[0][1] = $trueLocation 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 218)
  def _reduce_111(val, _values, result)
     val[0][1] = $falseLocation 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 219)
  def _reduce_112(val, _values, result)
     val[0][0] = val[1][0]; val[0][1] = val[1][1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 220)
  def _reduce_113(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 221)
  def _reduce_114(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 224)
  def _reduce_115(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 227)
  def _reduce_116(val, _values, result)
     generateArg(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 230)
  def _reduce_117(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 231)
  def _reduce_118(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 234)
  def _reduce_119(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 237)
  def _reduce_120(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 238)
  def _reduce_121(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 241)
  def _reduce_122(val, _values, result)
     endIf() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 244)
  def _reduce_123(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 245)
  def _reduce_124(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 246)
  def _reduce_125(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 249)
  def _reduce_126(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 252)
  def _reduce_127(val, _values, result)
     generateDoWhileQuadruple(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 255)
  def _reduce_128(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 258)
  def _reduce_129(val, _values, result)
     $jumpStack.push($quadrupleVector.count()) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 261)
  def _reduce_130(val, _values, result)
     $jumpStack.push("if") 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 264)
  def _reduce_131(val, _values, result)
     generateLogicControlQuadruple(val[0], false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 267)
  def _reduce_132(val, _values, result)
     generateElse() 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 270)
  def _reduce_133(val, _values, result)
     val[0][1] = newConstant(val[0][0], val[0][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 271)
  def _reduce_134(val, _values, result)
     val[0][1] = newConstant(val[0][0], val[0][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_plox_bison.y', 272)
  def _reduce_135(val, _values, result)
     val[0][1] = newConstant(val[0][0], val[0][1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ObjectivePlox
