arglist = expression { "," expression } .
casting_expression = "(" type_p ")" expression .
character = "based on the unicode character set" .
class_declaration = { modifier } "species" identifier [ "heirof" class_name ] "{" { field_declaration } "}" .
class_name = identifier
	| (
		 class_name "." identifier
	  ) .
compilation_unit = { import_statement } { type_declaration } .
constructor_declaration = { modifier } identifier (
		 "(" [ parameter_list ] ")"
	  )
	| ( [ parameter_list ] ) statement_block .
creating_expression = "fresh" (
		  (
			 class_name "(" [ arglist ] ")"
		  )
		| (
			 type_specifier [
				 "[" expression "]"
			  ] { "[" "]" }
		  )
		| (
			 "(" expression ")"
		  )
	  ) .
decimal_digits = "0..9" { "0..9" } .
do_statement = "do" statement "while" "(" expression ")" ";" .
doc_comment = "/**" "... text ..." "*/" .
exponent_part = "e" [ "+" | "-" ] decimal_digits .
expression = numeric_expression
	| testing_expression
	| logical_expression
	| string_expression
	| casting_expression
	| creating_expression
	| literal_expression
	| "null"
	| "super"
	| "itself"
	| identifier
	| (
		 "(" expression ")"
	  )
	| (
		 expression (
			  (
				 "(" [ arglist ] ")"
			  )
			| (
				 "[" expression "]"
			  )
			| ( "." expression )
			| ( "," expression )
			| ( "instanceof" class_name )
		  )
	  ) .
expression_plus_minus = term [
		 ( "+" | "-" ) term
	  ] .
field_declaration = (
		 { doc_comment } (
			  method_declaration
			| constructor_declaration
			| variable_declaration
		  )
	  )
	| static_initializer
	| ";" .
float_literal = (
		 decimal_digits "." [ decimal_digits ] { exponent_part } [ float_type_suffix ]
	  )
	| (
		 "." decimal_digits [ exponent_part ] [ float_type_suffix ]
	  )
	| (
		 decimal_digits [ exponent_part ] [ float_type_suffix ]
	  ) .
float_type_suffix = "f" | "d" .
for_statement = "for" "(" (
		  variable_declaration
		| ( expression ";" )
		| ";"
	  ) [ expression ] ";" [ expression ] ";" ")" statement .
identifier = "a..z,$,_" ( "a..z,$,_,0..9,unicode character over 00C0" ) .
if_statement = "if" "(" expression ")" statement [ "else" statement ] .
import_statement = "embrace" (
		  (
			 class_name "." "*"
		  )
		| class_name
	  ) ";" .
integer_literal = (
		  ( "1..9" { "0..9" } )
		| { "0..7" }
		| (
			 "0" "x" "0..9a..f" { "0..9a..f" }
		  )
	  ) [ "l" ] .
literal_expression = integer_literal
	| float_literal
	| string
	| character .
logical_expression = ( "!" expression )
	| (
		 expression (
			  "ampersand"
			| "ampersand="
			| "|="
			| ( "ampersand" "ampersand" )
			| "||="
			| "||"
		  ) expression
	  )
	| (
		 expression "?" expression ":" expression
	  )
	| "true"
	| "false" .
method_declaration = "funk" { modifier } type_p identifier "(" { parameter_list } ")" ( "[" "]" ) ( statement_block | ";" ) .
modifier = "open"
	| "hidden"
	| "protected"
	| "static"
	| "abstract" .
numeric_expression = (
		 (
			  "-"
			| "++"
			| "--"
		  ) expression
	  )
	| (
		 expression ( "++" | "--" )
	  )
	| (
		 expression (
			  "+="
			| "-="
			| "*"
			| "*="
			| "/"
			| "/="
			| "%"
			| "%="
		  ) expression
	  )
	| expression_plus_minus .
parameter = type_p identifier { "[" "]" } .
parameter_list = parameter { "," parameter } .
statement = variable_declaration
	| ( expression ";" )
	| ( statement_block )
	| ( unless_statement )
	| ( if_statement )
	| ( do_statement )
	| ( while_statement )
	| ( for_statement )
	| ( switch_statement )
	| (
		 "reply" [ expression ] ";"
	  )
	| ( ";" ) .
statement_block = "{" { statement } "}" .
static_initializer = "static" statement_block .
string = "''" { character } "''" .
string_expression = (
		 expression ( "+" | "+=" ) expression
	  ) .
switch_statement = "shift" "(" expression ")" "{" {
		  (
			 "instance" expression ":"
		  )
		| ( "default" ":" )
		| statement
	  } "}" .
term = expression [
		 ( "*" | "/" ) expression
	  ] .
testing_expression = (
		 expression (
			  ">"
			| "<"
			| ">="
			| "<="
			| "=="
			| "!="
		  ) expression
	  ) .
type_declaration = [ doc_comment ] "habemvs" class_declaration ";" .
type_p = type_specifier { "[" "]" } .
type_specifier = "logic"
	| "char"
	| "number"
	| "decimal"
	| class_name .
unless_statement = "unless" "(" expression ")" statement [ "else" statement ] .
variable_declaration = { modifier } ( "var" | "eternal" ) type_p variable_declarator { "," variable_declarator } ";" .
variable_declarator = identifier { "[" "]" } [ "=" variable_initializer ] .
variable_initializer = expression
	| (
		 "{" [
			 variable_initializer { "," variable_initializer } [ "," ]
		  ] "}"
	  ) .
while_statement = "while" "(" expression ")" statement .

