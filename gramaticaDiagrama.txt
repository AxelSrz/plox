plox_generation ::=
 (type_declaration)*

type_declaration  ::=
 "habemvs" class_declaration

class_declaration  ::=
 "species" identifier
 (  "heirof" identifier )?
 "{"  (variable_declaration)* (method_declaration)*  "}"

modifier ::=
 "open"
 |  "hidden"

variable_declaration  ::=
 ( "var" | "eternal" ) ( modifier )? type_specifier identifier (array_dec)?
 (  "," identifier (array_dec)?  )*  ";"

 array_dec ::=
 "[" CTEN ".." CTEN ("," CTEN ".." CTEN)* "]"

method_declaration  ::=
"funk" ( modifier )? type ( identifier | "chief" )
 "("  ( parameter_list )*  ")"
 ( statement_block  |  ";"  )

statement_block  ::=  "{" (variable_declaration)* ( statement )*  "}"

variable_assignment  ::=
 identifier   (  "[" expression "]"  )* assign_operator expression

assign_operator ::=
  "="
  | "+="
  | "-="
  | "*="
  | "/="
  | "||="
  | "&&="
  | "%="

parameter_list  ::=
parameter  (  "," parameter_list )*

parameter  ::=
type identifier

statement  ::=
variable_assignment ";"
 |  ( "hear" "(" expression ")" ";")
 |  ( "say" "(" expression ")" ";")
 |  ( unless_statement )
 |  ( if_statement )
 |  ( do_statement )
 |  ( while_statement )
 |  (  "reply"  ( expression )?  ";"  )
 |  (  function_call ";"  )
 |  (  identifier "." function_call ";"  )

unless_statement ::=
  "unless"  "(" expression  ")" statement
  (  "else" statement )?

if_statement ::=
 "if"  "(" expression  ")" statement
 (  "else" statement )?

do_statement ::=
 "do" statement  "while"  "(" expression  ")"  ";"

while_statement ::=
 "while"  "(" expression  ")" statement

expression  ::=
 ( expression num_operator expression )
 |  ( expression testing_operator expression )
 |  ( "!" expression )
 |  ( expression boolean_operator expression )
 |  ( "true" )
 |  ( "false" )
 |  ( "(" expression ")" )
 |  ( literal_expression )
 |  ( reference_expression )

reference_expression ::=
  identifier
  |  reference_expression ( ( "(" ( arglist )? ")" )
  |  ( "[" expression "]" )
  |  ( "." reference_expression )
  )

literal_expression  ::=
 cted
 | cten
 | ctestring

arglist  ::=
expression  (  "," arglist  )*

type_specifier ::=
 "logic"
 |  "char"
 |  "number"
 |  "decimal"
 |  identifier
 |  "oblivion"
 |  "string"

num_operator ::=
  "*"
  | "/"
  | "%"
  | "+"
  | "-"

testing_operator ::=
  ">"
  | "<"
  | ">="
  | "<="
  | "=="
  | "!="

boolean_operator ::=
  "&&"
  | "||"
